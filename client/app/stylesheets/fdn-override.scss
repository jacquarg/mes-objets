// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //

// $include-html-accordion-classes: $include-html-classes !default;

// $accordion-navigation-padding: rem-calc(16) !default;
// $accordion-navigation-bg-color: #efefef !default;
// $accordion-navigation-hover-bg-color: scale-color($accordion-navigation-bg-color, $lightness: -5%) !default;
// $accordion-navigation-active-bg-color: scale-color($accordion-navigation-bg-color, $lightness: -3%) !default;
// $accordion-navigation-font-color: #222 !default;
// $accordion-navigation-font-size: rem-calc(16) !default;
// $accordion-navigation-font-family: $body-font-family !default;

// $accordion-content-padding: $column-gutter/2 !default;
// $accordion-content-active-bg-color: #fff !default;

// @include exports("accordion") {
//   @if $include-html-accordion-classes {
//     .accordion {
//       @include clearfix; margin-bottom: 0;
//       dd {
//         display: block;
//         margin-bottom: 0 !important;
//         &.active > a { background: $accordion-navigation-active-bg-color; }
//         > a {
//           background: $accordion-navigation-bg-color;
//           color: $accordion-navigation-font-color;
//           padding: $accordion-navigation-padding;
//           display: block;
//           font-family: $accordion-navigation-font-family;
//           font-size: $accordion-navigation-font-size;
//           &:hover { background: $accordion-navigation-hover-bg-color; }
//         }
//       }
//       .content {
//         display: none;
//         padding: $accordion-content-padding;
//         &.active {
//           display: block;
//           background: $accordion-content-active-bg-color;
//         }
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // Alert Box Variables
// //
// $include-html-alert-classes: $include-html-classes !default;

// // We use this to control alert padding.
// $alert-padding-top: rem-calc(14) !default;
// $alert-padding-default-float: $alert-padding-top !default;
// $alert-padding-opposite-direction: $alert-padding-top + rem-calc(10) !default;
// $alert-padding-bottom: $alert-padding-top !default;

// // We use these to control text style.
// $alert-font-weight: normal !default;
// $alert-font-size: rem-calc(13) !default;
// $alert-font-color: #fff !default;
// $alert-font-color-alt: scale-color($secondary-color, $lightness: -66%) !default;

// // We use this for close hover effect.
// $alert-function-factor: -14% !default;

// // We use these to control border styles.
// $alert-border-style: solid !default;
// $alert-border-width: 1px !default;
// $alert-border-color: scale-color($primary-color, $lightness: $alert-function-factor) !default;
// $alert-bottom-margin: rem-calc(20) !default;

// // We use these to style the close buttons
// $alert-close-color: #333 !default;
// $alert-close-top: 50% !default;
// $alert-close-position: rem-calc(4) !default;
// $alert-close-font-size: rem-calc(22) !default;
// $alert-close-opacity: 0.3 !default;
// $alert-close-opacity-hover: 0.5 !default;
// $alert-close-padding: 9px 6px 4px !default;

// // We use this to control border radius
// $alert-radius: $global-radius !default;

// //
// // Alert Mixins
// //

// // We use this mixin to create a default alert base.
// @mixin alert-base {
//   border-style: $alert-border-style;
//   border-width: $alert-border-width;
//   display: block;
//   font-weight: $alert-font-weight;
//   margin-bottom: $alert-bottom-margin;
//   position: relative;
//   padding: $alert-padding-top $alert-padding-opposite-direction $alert-padding-bottom $alert-padding-default-float;
//   font-size: $alert-font-size;
// }

// // We use this mixin to add alert styles
// //
// // $bg - The background of the alert. Default: $primary-color.
// @mixin alert-style($bg:$primary-color) {

//   // This find the lightness percentage of the background color.
//   $bg-lightness: lightness($bg);

//   // We control which background color and border come through.
//   background-color: $bg;
//   border-color: scale-color($bg, $lightness: $alert-function-factor);

//   // We control the text color for you based on the background color.
//   @if $bg-lightness > 70% { color: $alert-font-color-alt; }
//   @else                   { color: $alert-font-color; }

// }

// // We use this to create the close button.
// @mixin alert-close {
//   font-size: $alert-close-font-size;
//   padding: $alert-close-padding;
//   line-height: 0;
//   position: absolute;
//   top: $alert-close-top;
//   margin-top: -($alert-close-font-size / 2);
//   #{$opposite-direction}: $alert-close-position;
//   color: $alert-close-color;
//   opacity: $alert-close-opacity;
//   &:hover,
//   &:focus { opacity: $alert-close-opacity-hover; }
// }

// // We use this to quickly create alerts with a single mixin.
// //
// // $bg - Background of alert. Default: $primary-color.
// // $radius - Radius of alert box. Default: false.
// @mixin alert($bg:$primary-color, $radius:false) {
//   @include alert-base;
//   @include alert-style($bg);
//   @include radius($radius);
// }

// @include exports("alert-box") {
//   @if $include-html-alert-classes {
//     .alert-box {
//       @include alert;

//       .close      { @include alert-close; }

//       &.radius    { @include radius($alert-radius); }
//       &.round     { @include radius($global-rounded); }

//       &.success   { @include alert-style($success-color); }
//       &.alert     { @include alert-style($alert-color); }
//       &.secondary { @include alert-style($secondary-color); }
//       &.warning { @include alert-style($warning-color); }
//       &.info { @include alert-style($info-color); }
//     }
//   }
// }// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // Block Grid Variables
// //
// $include-html-grid-classes: $include-html-classes !default;

// // We use this to control the maximum number of block grid elements per row
// $block-grid-elements: 12 !default;
// $block-grid-default-spacing: rem-calc(20) !default;

// $align-block-grid-to-grid: true !default;
// @if $align-block-grid-to-grid {
//   $block-grid-default-spacing: $column-gutter;
// }

// // Enables media queries for block-grid classes. Set to false if writing semantic HTML.
// $block-grid-media-queries: true !default;

// //
// // Block Grid Mixins
// //

// // Create a custom block grid
// //
// // $per-row - # of items to display per row. Default: false.
// // $spacing - # of ems to use as padding on each block item. Default: rem-calc(20).
// // $base-style - Apply a base style to block grid. Default: true.
// @mixin block-grid(
//   $per-row:false,
//   $spacing:$block-grid-default-spacing,
//   $include-spacing:true,
//   $base-style:true) {

//   @if $base-style {
//     display: block;
//     padding: 0;
//     @if $align-block-grid-to-grid {
//       margin: 0;
//     } @else {
//       margin: 0 (-$spacing/2);
//     }
//     @include clearfix;

//     &>li {
//       display: block;
//       height: auto;
//       float: $default-float;
//       @if $include-spacing {
//         padding: 0 ($spacing/2) $spacing;
//       }
//     }
//   }

//   @if $per-row {
//     &>li {
//       width: 100%/$per-row;
//       @if $include-spacing {
//         padding: 0 ($spacing/2) $spacing;
//       }
//       list-style: none;

//       &:nth-of-type(n) { clear: none; }
//       &:nth-of-type(#{$per-row}n+1) { clear: both; }
//       @if $align-block-grid-to-grid {
//         @include block-grid-aligned($per-row, $spacing);
//       }
//     }
//   }
// }

// @mixin block-grid-aligned($per-row, $spacing) {
//   @for $i from 1 through $block-grid-elements {
//     @if $per-row >= $i {
//       $grid-column: '+' + $i;
//       @if $per-row == $i {
//         $grid-column: '';
//       }
//       &:nth-child(#{$per-row}n#{unquote($grid-column)}) {
//         padding-left: ($spacing - (($spacing / $per-row) * ($per-row - ($i - 1))));
//         padding-right: ($spacing - (($spacing / $per-row) * $i));
//       }
//     }
//   }
// }

// // Generate presentational markup for block grid.
// //
// // $size - Name of class to use, i.e. "large" will generate .large-block-grid-1, .large-block-grid-2, etc.
// @mixin block-grid-html-classes($size,$include-spacing) {
//   @for $i from 1 through $block-grid-elements {
//     .#{$size}-block-grid-#{($i)} {
//       @include block-grid($i,$block-grid-default-spacing,$include-spacing,false);
//     }
//   }
// }

// @include exports("block-grid") {
//   @if $include-html-grid-classes {

//     [class*="block-grid-"] { @include block-grid; }

//     @if $block-grid-media-queries {
//       @media #{$small-up} {
//         @include block-grid-html-classes($size:small,$include-spacing:false);
//       }

//       @media #{$medium-up} {
//         @include block-grid-html-classes($size:medium,$include-spacing:false);
//       }

//       @media #{$large-up} {
//         @include block-grid-html-classes($size:large,$include-spacing:false);
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // Breadcrumb Variables
// //
// $include-html-nav-classes: $include-html-classes !default;

// // We use this to set the background color for the breadcrumb container.
// $crumb-bg: scale-color($secondary-color, $lightness: 55%) !default;

// // We use these to set the padding around the breadcrumbs.
// $crumb-padding: rem-calc(9 14 9) !default;
// $crumb-side-padding: rem-calc(12) !default;

// // We use these to control border styles.
// $crumb-function-factor: -10% !default;
// $crumb-border-size: 1px !default;
// $crumb-border-style: solid !default;
// $crumb-border-color: scale-color($crumb-bg, $lightness: $crumb-function-factor) !default;
// $crumb-radius: $global-radius !default;

// // We use these to set various text styles for breadcrumbs.
// $crumb-font-size: rem-calc(11) !default;
// $crumb-font-color: $primary-color !default;
// $crumb-font-color-current: #333 !default;
// $crumb-font-color-unavailable: #999 !default;
// $crumb-font-transform: uppercase !default;
// $crumb-link-decor: underline !default;

// // We use these to control the slash between breadcrumbs
// $crumb-slash-color: #aaa !default;
// $crumb-slash: "/" !default;

// //
// // Breadcrumb Mixins
// //

// // We use this mixin to create a container around our breadcrumbs
// @mixin crumb-container {
//   display: block;
//   padding: $crumb-padding;
//   overflow: hidden;
//   margin-#{$default-float}: 0;
//   list-style: none;
//   border-style: $crumb-border-style;
//   border-width: $crumb-border-size;

//   // We control which background color and border come through.
//   background-color: $crumb-bg;
//   border-color: $crumb-border-color;
// }

// // We use this mixin to create breadcrumb styles from list items.
// @mixin crumbs {

//   // A normal state will make the links look and act like clickable breadcrumbs.
//   margin: 0;
//   float: $default-float;
//   font-size: $crumb-font-size;
//   text-transform: $crumb-font-transform;

//   &:hover a, &:focus a { text-decoration: $crumb-link-decor; }

//   a,
//   span {
//     text-transform: $crumb-font-transform;
//     color: $crumb-font-color;
//   }

//   // Current is for the link of the current page
//   &.current {
//     cursor: $cursor-default-value;
//     color: $crumb-font-color-current;
//     a {
//       cursor: $cursor-default-value;
//       color: $crumb-font-color-current;
//     }

//     &:hover, &:hover a,
//     &:focus, &:focus a { text-decoration: none; }
//   }

//   // Unavailable removed color and link styles so it looks inactive.
//   &.unavailable {
//     color: $crumb-font-color-unavailable;
//     a { color: $crumb-font-color-unavailable; }

//     &:hover,
//     &:hover a,
//     &:focus,
//     a:focus {
//       text-decoration: none;
//       color: $crumb-font-color-unavailable;
//       cursor: $cursor-default-value;
//     }
//   }

//   &:before {
//     content: "#{$crumb-slash}";
//     color: $crumb-slash-color;
//     margin: 0 $crumb-side-padding;
//     position: relative;
//     top: 1px;
//   }

//   &:first-child:before {
//     content: " ";
//     margin: 0;
//   }
// }

// @include exports("breadcrumbs") {
//   @if $include-html-nav-classes {
//     .breadcrumbs {
//       @include crumb-container;
//       @include radius($crumb-radius);

//       &>* {
//         @include crumbs;
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "buttons";


// //
// // Button Group Variables
// //
// $include-html-button-classes: $include-html-classes !default;

// // Sets the margin for the right side by default, and the left margin if right-to-left direction is used
// $button-bar-margin-opposite: rem-calc(10) !default;
// $button-group-border-width: 1px !default;

// //
// // Button Group Mixins
// //

// // We use this to add styles for a button group container
// @mixin button-group-container($styles:true, $float:false) {
//   @if $styles {
//     list-style: none;
//     margin: 0;
//     #{$default-float}: 0;
//     @include clearfix();
//   }
//   @if $float {
//     float: #{$default-float};
//     margin-#{$opposite-direction}: $button-bar-margin-opposite;
//     & div { overflow: hidden; }
//   }
// }

// // We use this to control styles for button groups
// @mixin button-group-style($radius:false, $even:false, $float:$default-float) {

//   > button, .button {
//     border-#{$default-float}: $button-group-border-width solid;
//     border-color: rgba(255, 255, 255, 0.5);
//   }

//   &:first-child {
//     button, .button {
//       border-#{$default-float}: 0;
//     }
//   }

//   // We use this to control the flow, or remove those styles completely.
//   @if $float {
//     margin: 0;
//     float: $float;
//     // Make sure the first child doesn't get the negative margin.
//     &:first-child { margin-#{$default-float}: 0; }
//   }

//   // We use these to control left and right radius on first/last buttons in the group.
//   @if $radius == true {
//     &:first-child,
//     &:first-child > a,
//     &:first-child > button,
//     &:first-child > .button { @include side-radius($default-float, $button-radius); }
//     &:last-child,
//     &:last-child > a,
//     &:last-child > button,
//     &:last-child > .button { @include side-radius($opposite-direction, $button-radius); }
//   }
//   @else if $radius {
//     &:first-child,
//     &:first-child > a,
//     &:first-child > button,
//     &:first-child > .button { @include side-radius($default-float, $radius); }
//     &:last-child,
//     &:last-child > a,
//     &:last-child > button,
//     &:last-child > .button { @include side-radius($opposite-direction, $radius); }
//   }

//   // We use this to make the buttons even width across their container
//   @if $even {
//     width: percentage((100/$even) / 100);
//     button, .button { width: 100%; }
//   }

// }

// @include exports("button-group") {
//   @if $include-html-button-classes {
//     .button-group { @include button-group-container;

//       li { @include button-group-style(); }

//       &.radius > * { @include button-group-style($radius:$button-radius, $float:null); }
//       &.round > * { @include button-group-style($radius:$button-round, $float:null); }

//       @for $i from 2 through 8 {
//         &.even-#{$i} li { @include button-group-style($even:$i, $float:null); }
//       }
//     }

//     .button-bar {
//       @include clearfix;
//       .button-group { @include button-group-container($styles:false,$float:true); }
//     }
//   }
// }// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-button-classes: $include-html-classes !default;

// // We use these to build padding for buttons.
// $button-tny: rem-calc(10) !default;
// $button-sml: rem-calc(14) !default;
// $button-med: rem-calc(16) !default;
// $button-lrg: rem-calc(18) !default;

// // We use this to control the display property.
// $button-display: inline-block !default;
// $button-margin-bottom: rem-calc(20) !default;

// // We use these to control button text styles.
// $button-font-family: $body-font-family !default;
// $button-font-color: #fff !default;
// $button-font-color-alt: #333 !default;
// $button-font-tny: rem-calc(11) !default;
// $button-font-sml: rem-calc(13) !default;
// $button-font-med: rem-calc(16) !default;
// $button-font-lrg: rem-calc(20) !default;
// $button-font-weight: normal !default;
// $button-font-align: center !default;

// // We use these to control various hover effects.
// $button-function-factor: -20% !default;

// // We use these to control button border styles.
// $button-border-width: 0px !default;
// $button-border-style: solid !default;

// // We use this to set the default radius used throughout the core.
// $button-radius: $global-radius !default;
// $button-round: $global-rounded !default;

// // We use this to set default opacity for disabled buttons.
// $button-disabled-opacity: 0.7 !default;


// //
// // @MIXIN
// //
// // We use this mixin to create a default button base.
// //
// // $style - Sets base styles. Can be set to false. Default: true.
// // $display - Used to control display property. Default: $button-display || inline-block

// @mixin button-base($style:true, $display:$button-display) {
//   @if $style {
//     border-style: $button-border-style;
//     border-width: $button-border-width;
//     cursor: $cursor-pointer-value;
//     font-family: $button-font-family;
//     font-weight: $button-font-weight;
//     line-height: normal;
//     margin: 0 0 $button-margin-bottom;
//     position: relative;
//     text-decoration: none;
//     text-align: $button-font-align;
//   }
//   @if $display { display: $display; }
// }

// // @MIXIN
// //
// // We use this mixin to add button size styles
// //
// // $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// // $full-width - We can set $full-width:true to remove side padding extend width - Default: false

// @mixin button-size($padding:$button-med, $full-width:false) {

//   // We control which padding styles come through,
//   // these can be turned off by setting $padding:false
//   @if $padding {
//     padding-top: $padding;
//     padding-#{$opposite-direction}: $padding * 2;
//     padding-bottom: $padding + rem-calc(1);
//     padding-#{$default-float}: $padding * 2;

//     // We control the font-size based on mixin input.
//     @if      $padding == $button-med { font-size: $button-font-med; }
//     @else if $padding == $button-tny { font-size: $button-font-tny; }
//     @else if $padding == $button-sml { font-size: $button-font-sml; }
//     @else if $padding == $button-lrg { font-size: $button-font-lrg; }
// /*     @else                            { font-size: $padding - rem-calc(2); } */
//   }

//   // We can set $full-width:true to remove side padding extend width.
//   @if $full-width {
//     // We still need to check if $padding is set.
//     @if $padding {
//     padding-top: $padding;
//     padding-bottom: $padding + rem-calc(1);
//     } @else if $padding == false {
//       padding-top:0;
//       padding-bottom:0;
//     }
//     padding-right: 0;
//     padding-left: 0;
//     width: 100%;
//   }
// }

// // @MIXIN
// //
// // We use this mixin to add button color styles
// //
// // $bg - Primary color set in settings file. Default: $primary-color.
// // $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// // $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// @mixin button-style($bg:$primary-color, $radius:false, $disabled:false) {

//   // We control which background styles are used,
//   // these can be removed by setting $bg:false
//   @if $bg {
//     // This find the lightness percentage of the background color.
//     $bg-lightness: lightness($bg);

//     background-color: $bg;
//     border-color: scale-color($bg, $lightness: $button-function-factor);
//     &:hover,
//     &:focus { background-color: scale-color($bg, $lightness: $button-function-factor); }

//     // We control the text color for you based on the background color.
//     @if $bg-lightness > 70% {
//       color: $button-font-color-alt;
//       &:hover,
//       &:focus { color: $button-font-color-alt; }
//     }
//     @else {
//       color: $button-font-color;
//       &:hover,
//       &:focus { color: $button-font-color; }
//     }
//   }

//   // We can set $disabled:true to create a disabled transparent button.
//   @if $disabled {
//     cursor: $cursor-default-value;
//     opacity: $button-disabled-opacity;
//     @if $experimental {
//       -webkit-box-shadow: none;
//     }
//     box-shadow: none;
//     &:hover,
//     &:focus { background-color: $bg; }
//   }

//   // We can control how much button radius us used.
//   @if $radius == true { @include radius($button-radius); }
//   @else if $radius { @include radius($radius); }

// }

// // @MIXIN
// //
// // We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
// //
// // $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// // $bg - Primary color set in settings file. Default: $primary-color.
// // $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// // $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// // $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// // $is-input - <input>'s and <button>'s take on strange padding. We added this to help fix that. Default:false.
// // $is-prefix - Not used? Default:false.
// @mixin button($padding:$button-med, $bg:$primary-color, $radius:false, $full-width:false, $disabled:false, $is-prefix:false) {
//   @include button-base;
//   @include button-size($padding, $full-width);
//   @include button-style($bg, $radius, $disabled);
// }


// @include exports("button") {
//   @if $include-html-button-classes {

//     // Default styles applied outside of media query
//     button, .button {
//       @include button-base;
//       @include button-size;
//       @include button-style;

//       @include single-transition(background-color);
//       @include button-size($padding:$button-med, $full-width:false);

//       &.secondary { @include button-style($bg:$secondary-color); }
//       &.success   { @include button-style($bg:$success-color); }
//       &.alert     { @include button-style($bg:$alert-color); }

//       &.large  { @include button-size($padding:$button-lrg); }
//       &.small  { @include button-size($padding:$button-sml); }
//       &.tiny   { @include button-size($padding:$button-tny); }
//       &.expand { @include button-size($padding:null,$full-width:true); }

//       &.left-align  { text-align: left; text-indent: rem-calc(12); }
//       &.right-align { text-align: right; padding-right: rem-calc(12); }

//       &.radius { @include button-style($bg:false, $radius:true); }
//       &.round  { @include button-style($bg:false, $radius:$button-round); }

//       &.disabled, &[disabled] { @include button-style($bg:$primary-color, $disabled:true);
//         &.secondary { @include button-style($bg:$secondary-color, $disabled:true); }
//         &.success { @include button-style($bg:$success-color, $disabled:true); }
//         &.alert { @include button-style($bg:$alert-color, $disabled:true); }
//       }
//     }

//     @media #{$medium-up} {
//       button, .button {
//         @include button-base($style:false, $display:inline-block);
//         @include button-size($padding:false, $full-width:false);
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-clearing-classes: $include-html-classes !default;

// // We use these to set the background colors for parts of Clearing.
// $clearing-bg: #333 !default;
// $clearing-caption-bg: $clearing-bg !default;
// $clearing-carousel-bg: rgba(51,51,51,0.8) !default;
// $clearing-img-bg: $clearing-bg !default;

// // We use these to style the close button
// $clearing-close-color: #ccc !default;
// $clearing-close-size: 30px !default;

// // We use these to style the arrows
// $clearing-arrow-size: 12px !default;
// $clearing-arrow-color: $clearing-close-color !default;

// // We use these to style captions
// $clearing-caption-font-color: #ccc !default;
// $clearing-caption-font-size: 0.875em !default;
// $clearing-caption-padding: 10px 30px 20px !default;

// // We use these to make the image and carousel height and style
// $clearing-active-img-height: 85% !default;
// $clearing-carousel-height: 120px !default;
// $clearing-carousel-thumb-width: 120px !default;
// $clearing-carousel-thumb-active-border: 1px solid rgb(255,255,255) !default;

// @include exports("clearing") {
//   @if $include-html-clearing-classes {
//     // We decided to not create a mixin for Clearing because it relies
//     // on predefined classes and structure to work properly.
//     // The variables above should give enough control.

//     /* Clearing Styles */
//     .clearing-thumbs, #{data('clearing')} {
//       @include clearfix;
//       margin-bottom: 0;
//       margin-#{$default-float}: 0;
//       list-style: none;

//       li {
//         float: $default-float;
//         margin-#{$opposite-direction}: 10px;
//       }

//       &[class*="block-grid-"] li {
//         margin-#{$opposite-direction}: 0;
//       }
//     }

//     .clearing-blackout {
//       background: $clearing-bg;
//       position: fixed;
//       width: 100%;
//       height: 100%;
//       top: 0;
//       #{$default-float}: 0;
//       z-index: 998;

//       .clearing-close { display: block; }
//     }

//     .clearing-container {
//       position: relative;
//       z-index: 998;
//       height: 100%;
//       overflow: hidden;
//       margin: 0;
//     }

//     .clearing-touch-label {
//       position: absolute;
//       top: 50%;
//       left: 50%;
//       color: #aaa;
//       font-size: 0.6em;
//     }

//     .visible-img {
//       height: 95%;
//       position: relative;

//       img {
//         position: absolute;
//         #{$default-float}: 50%;
//         top: 50%;
//         margin-#{$default-float}: -50%;
//         max-height: 100%;
//         max-width: 100%;
//       }
//     }

//     .clearing-caption {
//       color: $clearing-caption-font-color;
//       font-size: $clearing-caption-font-size;
//       line-height: 1.3;
//       margin-bottom: 0;
//       text-align: center;
//       bottom: 0;
//       background: $clearing-caption-bg;
//       width: 100%;
//       padding: $clearing-caption-padding;
//       position: absolute;
//       #{$default-float}: 0;
//     }

//     .clearing-close {
//       z-index: 999;
//       padding-#{$default-float}: 20px;
//       padding-top: 10px;
//       font-size: $clearing-close-size;
//       line-height: 1;
//       color: $clearing-close-color;
//       display: none;

//       &:hover,
//       &:focus { color: #ccc; }
//     }

//     .clearing-assembled .clearing-container { height: 100%;
//       .carousel > ul { display: none; }
//     }

//     // If you want to show a lightbox, but only have a single image come through as the thumbnail
//     .clearing-feature li {
//       display: none;
//       &.clearing-featured-img {
//         display: block;
//       }
//     }

//     // Large screen overrides
//     @media #{$medium-up} {
//       .clearing-main-prev,
//       .clearing-main-next {
//         position: absolute;
//         height: 100%;
//         width: 40px;
//         top: 0;
//         & > span {
//           position: absolute;
//           top: 50%;
//           display: block;
//           width: 0;
//           height: 0;
//           border: solid $clearing-arrow-size;
//           &:hover { opacity: 0.8; }
//         }
//       }
//       .clearing-main-prev {
//         #{$default-float}: 0;
//         & > span {
//           #{$default-float}: 5px;
//           border-color: transparent;
//           border-#{$opposite-direction}-color: $clearing-arrow-color;
//         }
//       }
//       .clearing-main-next {
//         #{$opposite-direction}: 0;
//         & > span {
//           border-color: transparent;
//           border-#{$default-float}-color: $clearing-arrow-color;
//         }
//       }

//       .clearing-main-prev.disabled,
//       .clearing-main-next.disabled { opacity: 0.3; }

//       .clearing-assembled .clearing-container {

//         .carousel {
//           background: $clearing-carousel-bg;
//           height: $clearing-carousel-height;
//           margin-top: 10px;
//           text-align: center;

//           & > ul {
//             display: inline-block;
//             z-index: 999;
//             height: 100%;
//             position: relative;
//             float: none;

//             li {
//               display: block;
//               width: $clearing-carousel-thumb-width;
//               min-height: inherit;
//               float: $default-float;
//               overflow: hidden;
//               margin-#{$opposite-direction}: 0;
//               padding: 0;
//               position: relative;
//               cursor: $cursor-pointer-value;
//               opacity: 0.4;

//               &.fix-height {
//                 img {
//                   height: 100%;
//                   max-width: none;
//                 }
//               }

//               a.th {
//                 border: none;
//                 @if $experimental {
//                   -webkit-box-shadow: none;
//                 }
//                         box-shadow: none;
//                 display: block;
//               }

//               img {
//               cursor: $cursor-pointer-value !important;
//               width: 100% !important;
//               }

//               &.visible { opacity: 1; }
//               &:hover { opacity: 0.8; }
//             }
//           }
//         }

//         .visible-img {
//           background: $clearing-img-bg;
//           overflow: hidden;
//           height: $clearing-active-img-height;
//         }
//       }

//       .clearing-close {
//         position: absolute;
//         top: 10px;
//         #{$opposite-direction}: 20px;
//         padding-#{$default-float}: 0;
//         padding-top: 0;
//       }
//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-button-classes: $include-html-classes !default;

// // We use these to set the color of the pip in dropdown buttons
// $dropdown-button-pip-color: #fff !default;
// $dropdown-button-pip-color-alt: #333 !default;

// $button-pip-tny: rem-calc(6) !default;
// $button-pip-sml: rem-calc(7) !default;
// $button-pip-med: rem-calc(9) !default;
// $button-pip-lrg: rem-calc(11) !default;

// // We use these to style tiny dropdown buttons
// $dropdown-button-padding-tny: $button-pip-tny * 7 !default;
// $dropdown-button-pip-size-tny: $button-pip-tny !default;
// $dropdown-button-pip-opposite-tny: $button-pip-tny * 3 !default;
// $dropdown-button-pip-top-tny: -$button-pip-tny / 2 + rem-calc(1) !default;

// // We use these to style small dropdown buttons
// $dropdown-button-padding-sml: $button-pip-sml * 7 !default;
// $dropdown-button-pip-size-sml: $button-pip-sml !default;
// $dropdown-button-pip-opposite-sml: $button-pip-sml * 3 !default;
// $dropdown-button-pip-top-sml: -$button-pip-sml / 2 + rem-calc(1) !default;

// // We use these to style medium dropdown buttons
// $dropdown-button-padding-med: $button-pip-med * 6 + rem-calc(3) !default;
// $dropdown-button-pip-size-med: $button-pip-med - rem-calc(3) !default;
// $dropdown-button-pip-opposite-med: $button-pip-med * 2.5 !default;
// $dropdown-button-pip-top-med: -$button-pip-med / 2 + rem-calc(2) !default;

// // We use these to style large dropdown buttons
// $dropdown-button-padding-lrg: $button-pip-lrg * 5 + rem-calc(3) !default;
// $dropdown-button-pip-size-lrg: $button-pip-lrg - rem-calc(6) !default;
// $dropdown-button-pip-opposite-lrg: $button-pip-lrg * 2.5 !default;
// $dropdown-button-pip-top-lrg: -$button-pip-lrg / 2 + rem-calc(3) !default;

// // @mixins
// //
// // Dropdown Button Mixin
// //
// // We use this mixin to build off of the button mixin and add dropdown button styles
// //
// // $padding - Determines the size of button you're working with. Default: medium. Options [tiny, small, medium, large]
// // $pip-color - Color of the little triangle that points to the dropdown. Default: #fff.
// // $base-style - Add in base-styles. This can be set to false. Default:true

// @mixin dropdown-button($padding:medium, $pip-color:#fff, $base-style:true) {

//   // We add in base styles, but they can be negated by setting to 'false'.
//   @if $base-style {
//     position: relative;

//     // This creates the base styles for the triangle pip
//     &:before {
//       position: absolute;
//       content: "";
//       width: 0;
//       height: 0;
//       display: block;
//       border-style: solid;
//       border-color: $dropdown-button-pip-color transparent transparent transparent;
//       top: 50%;
//     }
//   }

//   // If we're dealing with tiny buttons, use these styles
//   @if $padding == tiny {
//     padding-#{$opposite-direction}: $dropdown-button-padding-tny;
//     &:before {
//       border-width: $dropdown-button-pip-size-tny;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-tny;
//       margin-top: $dropdown-button-pip-top-tny;
//     }
//   }

//   // If we're dealing with small buttons, use these styles
//   @if $padding == small {
//     padding-#{$opposite-direction}: $dropdown-button-padding-sml;
//     &:before {
//       border-width: $dropdown-button-pip-size-sml;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-sml;
//       margin-top: $dropdown-button-pip-top-sml;
//     }
//   }

//   // If we're dealing with default (medium) buttons, use these styles
//   @if $padding == medium {
//     padding-#{$opposite-direction}: $dropdown-button-padding-med;
//     &:before {
//       border-width: $dropdown-button-pip-size-med;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-med;
//       margin-top: $dropdown-button-pip-top-med;
//     }
//   }

//   // If we're dealing with large buttons, use these styles
//   @if $padding == large {
//     padding-#{$opposite-direction}: $dropdown-button-padding-lrg;
//     &:before {
//       border-width: $dropdown-button-pip-size-lrg;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-lrg;
//       margin-top: $dropdown-button-pip-top-lrg;
//     }
//   }

//   // We can control the pip color. We didn't use logic in this case, just set it and forget it.
//   @if $pip-color {
//     &:before { border-color: $pip-color transparent transparent transparent; }
//   }
// }

// @include exports("dropdown-button") {
//   @if $include-html-button-classes {
//     .dropdown.button, button.dropdown { @include dropdown-button;
//       &.tiny { @include dropdown-button(tiny,$base-style:false); }
//       &.small { @include dropdown-button(small,$base-style:false); }
//       &.large { @include dropdown-button(large,$base-style:false); }
//       &.secondary:before { border-color: $dropdown-button-pip-color-alt transparent transparent transparent; }
//     }
//   }
// }
// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-dropdown-classes: $include-html-classes !default;

// // We use these to controls height and width styles.
// $f-dropdown-max-width: 200px !default;
// $f-dropdown-height: auto !default;
// $f-dropdown-max-height: none !default;

// // Used for bottom position
// $f-dropdown-margin-top: 2px !default;

// // Used for right position
// $f-dropdown-margin-left: $f-dropdown-margin-top !default;

// // Used for left position
// $f-dropdown-margin-right: $f-dropdown-margin-top !default;

// // Used for top position
// $f-dropdown-margin-bottom: $f-dropdown-margin-top !default;

// // We use this to control the background color
// $f-dropdown-bg: #fff !default;

// // We use this to set the border styles for dropdowns.
// $f-dropdown-border-style: solid !default;
// $f-dropdown-border-width: 1px !default;
// $f-dropdown-border-color: scale-color(#fff, $lightness: -20%) !default;

// // We use these to style the triangle pip.
// $f-dropdown-triangle-size: 6px !default;
// $f-dropdown-triangle-color: #fff !default;
// $f-dropdown-triangle-side-offset: 10px !default;

// // We use these to control styles for the list elements.
// $f-dropdown-list-style: none !default;
// $f-dropdown-font-color: #555 !default;
// $f-dropdown-font-size: rem-calc(14) !default;
// $f-dropdown-list-padding: rem-calc(5, 10) !default;
// $f-dropdown-line-height: rem-calc(18) !default;
// $f-dropdown-list-hover-bg: #eeeeee !default;
// $dropdown-mobile-default-float: 0 !default;

// // We use this to control the styles for when the dropdown has custom content.
// $f-dropdown-content-padding: rem-calc(20) !default;

// //
// // @mixins
// //
// //
// // NOTE: Make default max-width change between list and content types. Can add more width with classes, maybe .small, .medium, .large, etc.;
// // We use this to style the dropdown container element.
// // $content-list - Sets list-style. Default: list. Options: [list, content]
// // $triangle - Sets if dropdown has triangle. Default:true.
// // $max-width - Default: $f-dropdown-max-width || 200px.
// @mixin dropdown-container($content:list, $triangle:true, $max-width:$f-dropdown-max-width) {
//   position: absolute;
//   left: -9999px;
//   list-style: $f-dropdown-list-style;
//   margin-#{$default-float}: 0;

//   > *:first-child { margin-top: 0; }
//   > *:last-child { margin-bottom: 0; }

//   @if $content == list {
//     width: 100%;
//     max-height: $f-dropdown-max-height;
//     height: $f-dropdown-height;
//     background: $f-dropdown-bg;
//     border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color;
//     font-size: $f-dropdown-font-size;
//     z-index: 99;
//   }
//   @else if $content == content {
//     padding: $f-dropdown-content-padding;
//     width: 100%;
//     height: $f-dropdown-height;
//     max-height: $f-dropdown-max-height;
//     background: $f-dropdown-bg;
//     border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color;
//     font-size: $f-dropdown-font-size;
//     z-index: 99;
//   }

//   @if $triangle == bottom {
//     margin-top: $f-dropdown-margin-top;

//     &:before {
//       @include css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, bottom);
//       position: absolute;
//       top: -($f-dropdown-triangle-size * 2);
//       #{$default-float}: $f-dropdown-triangle-side-offset;
//       z-index: 99;
//     }
//     &:after {
//       @include css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, bottom);
//       position: absolute;
//       top: -(($f-dropdown-triangle-size + 1) * 2);
//       #{$default-float}: $f-dropdown-triangle-side-offset - 1;
//       z-index: 98;
//     }

//     &.right:before {
//       left: auto;
//       right: $f-dropdown-triangle-side-offset;
//     }
//     &.right:after {
//       left: auto;
//       right: $f-dropdown-triangle-side-offset - 1;
//     }
//   }

//   @if $triangle == left {
//     margin-top: 0;
//     margin-left: $f-dropdown-margin-right;

//     &:before {
//       @include css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, right);
//       position: absolute;
//       top: $f-dropdown-triangle-side-offset;
//       #{$default-float}: -($f-dropdown-triangle-size * 2);
//       z-index: 99;
//     }
//     &:after {
//       @include css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, right);
//       position: absolute;
//       top: $f-dropdown-triangle-side-offset - 1;
//       #{$default-float}: -($f-dropdown-triangle-size * 2) - 2;
//       z-index: 98;
//     }

//   }

//   @if $triangle == right {
//     margin-top: 0;
//     margin-left: -$f-dropdown-margin-right;

//     &:before {
//       @include css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, left);
//       position: absolute;
//       top: $f-dropdown-triangle-side-offset;
//       #{$opposite-direction}: -($f-dropdown-triangle-size * 2);
//       left: auto;
//       z-index: 99;
//     }
//     &:after {
//       @include css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, left);
//       position: absolute;
//       top: $f-dropdown-triangle-side-offset - 1;
//       #{$opposite-direction}: -($f-dropdown-triangle-size * 2) - 2;
//       left: auto;
//       z-index: 98;
//     }

//   }

//   @if $triangle == top {
//     margin-top: -$f-dropdown-margin-bottom;
//     margin-left: 0;

//     &:before {
//       @include css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, top);
//       position: absolute;
//       top: auto;
//       bottom: -($f-dropdown-triangle-size * 2);
//       #{$default-float}: $f-dropdown-triangle-side-offset;
//       right: auto;
//       z-index: 99;
//     }
//     &:after {
//       @include css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, top);
//       position: absolute;
//       top: auto;
//       bottom: -($f-dropdown-triangle-size * 2) - 2;
//       #{$default-float}: $f-dropdown-triangle-side-offset - 1;
//       right: auto;
//       z-index: 98;
//     }

//   }

//   @if $max-width { max-width: $max-width; }
//   @else { max-width: $f-dropdown-max-width; }

// }

// // @MIXIN
// //
// // We use this to style the list elements or content inside the dropdown.

// @mixin dropdown-style {
//   font-size: $f-dropdown-font-size;
//   cursor: $cursor-pointer-value;

//   line-height: $f-dropdown-line-height;
//   margin: 0;

//   &:hover,
//   &:focus { background: $f-dropdown-list-hover-bg; }

//   a {
//     display: block;
//     padding: $f-dropdown-list-padding;
//     color: $f-dropdown-font-color;
//   }
// }

// @include exports("dropdown") {
//   @if $include-html-dropdown-classes {

//     /* Foundation Dropdowns */
//     .f-dropdown {
//       @include dropdown-container(list, bottom);

//       &.drop-right {
//         @include dropdown-container(list, left);
//       }

//       &.drop-left {
//         @include dropdown-container(list, right);
//       }

//       &.drop-top {
//         @include dropdown-container(list, top);
//       }
//       // max-width: none;

//       li { @include dropdown-style; }

//       // You can also put custom content in these dropdowns
//       &.content { @include dropdown-container(content, $triangle:false); }

//       // Sizes
//       &.tiny    { max-width: 200px; }
//       &.small   { max-width: 300px; }
//       &.medium  { max-width: 500px; }
//       &.large   { max-width: 800px; }
//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-media-classes: $include-html-classes !default;

// // We use these to control video container padding and margins
// $flex-video-padding-top: rem-calc(25) !default;
// $flex-video-padding-bottom: 67.5% !default;
// $flex-video-margin-bottom: rem-calc(16) !default;

// // We use this to control widescreen bottom padding
// $flex-video-widescreen-padding-bottom: 56.34% !default;

// //
// // @mixins
// //

// @mixin flex-video-container {
//   position: relative;
//   padding-top: $flex-video-padding-top;
//   padding-bottom: $flex-video-padding-bottom;
//   height: 0;
//   margin-bottom: $flex-video-margin-bottom;
//   overflow: hidden;

//   &.widescreen { padding-bottom: $flex-video-widescreen-padding-bottom; }
//   &.vimeo { padding-top: 0; }

//   iframe,
//   object,
//   embed,
//   video {
//     position: absolute;
//     top: 0;
//     #{$default-float}: 0;
//     width: 100%;
//     height: 100%;
//   }
// }

// @include exports("flex-video") {
//   @if $include-html-media-classes {
//     .flex-video { @include flex-video-container; }
//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "buttons";

// //
// // @variables
// //
// $include-html-form-classes: $include-html-classes !default;

// // We use this to set the base for lots of form spacing and positioning styles
// $form-spacing: rem-calc(16) !default;

// // We use these to style the labels in different ways
// $form-label-pointer: pointer !default;
// $form-label-font-size: rem-calc(14) !default;
// $form-label-font-weight: normal !default;
// $form-label-line-height: 1.5 !default;
// $form-label-font-color: scale-color(#000, $lightness: 30%) !default;
// $form-label-bottom-margin: 0 !default;
// $input-font-family: inherit !default;
// $input-font-color: rgba(0,0,0,0.75) !default;
// $input-font-size: rem-calc(14) !default;
// $input-bg-color: #fff !default;
// $input-focus-bg-color: scale-color(#fff, $lightness: -2%) !default;
// $input-border-color: scale-color(#fff, $lightness: -20%) !default;
// $input-focus-border-color: scale-color(#fff, $lightness: -40%) !default;
// $input-border-style: solid !default;
// $input-border-width: 1px !default;
// $input-border-radius: $global-radius !default;
// $input-disabled-bg: #ddd !default;
// $input-box-shadow: inset 0 1px 2px rgba(0,0,0,0.1) !default;
// $input-include-glowing-effect: true !default;

// // We use these to style the fieldset border and spacing.
// $fieldset-border-style: solid !default;
// $fieldset-border-width: 1px !default;
// $fieldset-border-color: #ddd !default;
// $fieldset-padding: rem-calc(20) !default;
// $fieldset-margin: rem-calc(18 0) !default;

// // We use these to style the legends when you use them
// $legend-bg: #fff !default;
// $legend-font-weight: bold !default;
// $legend-padding: rem-calc(0 3) !default;

// // We use these to style the prefix and postfix input elements
// $input-prefix-bg: scale-color(#fff, $lightness: -5%) !default;
// $input-prefix-border-color: scale-color(#fff, $lightness: -20%) !default;
// $input-prefix-border-size: 1px !default;
// $input-prefix-border-type: solid !default;
// $input-prefix-overflow: hidden !default;
// $input-prefix-font-color: #333 !default;
// $input-prefix-font-color-alt: #fff !default;

// // We use these to style the error states for inputs and labels
// $input-error-message-padding: rem-calc(6 9 9) !default;
// $input-error-message-top: -1px !default;
// $input-error-message-font-size: rem-calc(12) !default;
// $input-error-message-font-weight: normal !default;
// $input-error-message-font-style: italic !default;
// $input-error-message-font-color: #fff !default;
// $input-error-message-font-color-alt: #333 !default;

// // We use this to style the glowing effect of inputs when focused
// $glowing-effect-fade-time: 0.45s !default;
// $glowing-effect-color: $input-focus-border-color !default;

// // Select variables
// $select-bg-color: #fafafa !default;
// $select-hover-bg-color: scale-color($select-bg-color, $lightness: -3%) !default;

// //
// // @MIXINS
// //

// // We use this mixin to give us form styles for rows inside of forms
// @mixin form-row-base {
//   .row { margin: 0 ((-$form-spacing) / 2);

//     .column,
//     .columns { padding: 0 $form-spacing / 2; }

//     // Use this to collapse the margins of a form row
//     &.collapse { margin: 0;

//       .column,
//       .columns { padding: 0; }
//       input {
//         -moz-border-radius-bottom#{$opposite-direction}: 0;
//         -moz-border-radius-top#{$opposite-direction}: 0;
//         -webkit-border-bottom-#{$opposite-direction}-radius: 0;
//         -webkit-border-top-#{$opposite-direction}-radius: 0;
//       }

//     }
//   }
//   input.column,
//   input.columns,
//   textarea.column,
//   textarea.columns { padding-#{$default-float}: $form-spacing / 2; }
// }

// // @MIXIN
// //
// // We use this mixin to give all basic form elements their style
// @mixin form-element {
//   background-color: $input-bg-color;
//   font-family: $input-font-family;
//   border: $input-border-width $input-border-style $input-border-color;
//   @if $experimental {
//     -webkit-box-shadow: $input-box-shadow;
//   }
//   box-shadow: $input-box-shadow;
//   color: $input-font-color;
//   display: block;
//   font-size: $input-font-size;
//   margin: 0 0 $form-spacing 0;
//   padding: $form-spacing / 2;
//   height: ($input-font-size + ($form-spacing * 1.5) - rem-calc(1));
//   width: 100%;
//   @include box-sizing(border-box);
//   @if $input-include-glowing-effect {
//     @include block-glowing-effect(focus, $glowing-effect-fade-time, $glowing-effect-color);
//   }
//   // Basic focus styles
//   &:focus {
//     background: $input-focus-bg-color;
//     border-color: $input-focus-border-color;
//     outline: none;
//   }

//   // Disabled background input background color
//   &[disabled], fieldset[disabled] & { background-color: $input-disabled-bg; }
// }

// // @MIXIN
// //
// // We use this mixin to create form labels
// //
// // $alignment - Alignment options. Default: false. Options: [right, inline, false]
// // $base-style - Control whether or not the base styles come through. Default: true.
// @mixin form-label($alignment:false, $base-style:true) {

//   // Control whether or not the base styles come through.
//   @if $base-style {
//     font-size: $form-label-font-size;
//     color: $form-label-font-color;
//     cursor: $form-label-pointer;
//     display: block;
//     font-weight: $form-label-font-weight;
//     line-height: $form-label-line-height;
//     margin-bottom: $form-label-bottom-margin;
//   }

//   // Alignment options
//   @if $alignment == right {
//     float: none;
//     text-align: right;
//   }
//   @else if $alignment == inline {
//     margin: 0 0 $form-spacing 0;
//     padding: $form-spacing / 2 + rem-calc($input-border-width * 2) 0;
//   }
// }

// // We use this mixin to create postfix/prefix form Labels
// @mixin prefix-postfix-base {
//   display: block;
//   position: relative;
//   z-index: 2;
//   text-align: center;
//   width: 100%;
//   padding-top: 0;
//   padding-bottom: 0;
//   border-style: $input-prefix-border-type;
//   border-width: $input-prefix-border-size;
//   overflow: $input-prefix-overflow;
//   font-size: $form-label-font-size;
//   height: ($input-font-size + ($form-spacing * 1.5) - rem-calc(1));
//   line-height: ($input-font-size + ($form-spacing * 1.5) - rem-calc(1));
// }

// // @MIXIN
// //
// // We use this mixin to create prefix label styles
// // $bg - Default:$input-prefix-bg || scale-color(#fff, $lightness: -5%) !default;
// // $is-button - Toggle position settings if prefix is a button. Default:false
// //
// @mixin prefix($bg:$input-prefix-bg, $border:$input-prefix-border-color, $is-button:false) {

//   @if $bg {
//     $bg-lightness: lightness($bg);
//     background: $bg;
//     border-#{$opposite-direction}: none;

//     // Control the font color based on background brightness
//     @if $bg-lightness > 70% or $bg == yellow { color: $input-prefix-font-color; }
//     @else { color: $input-prefix-font-color-alt; }
//   }

//   @if $border {
//     border-color: $border;
//   }

//   @if $is-button {
//     padding-#{$default-float}: 0;
//     padding-#{$opposite-direction}: 0;
//     padding-top: 0;
//     padding-bottom: 0;
//     text-align: center;
//     line-height: rem-calc(34);
//     border: none;
//   }

// }

// // @MIXIN
// //
// // We use this mixin to create postfix label styles
// // $bg - Default:$input-prefix-bg || scale-color(#fff, $lightness: -5%) !default;
// // $is-button - Toggle position settings if prefix is a button. Default: false
// @mixin postfix($bg:$input-prefix-bg, $border:$input-prefix-border-color, $is-button:false) {

//   @if $bg {
//     $bg-lightness: lightness($bg);
//     background: $bg;
//     border-#{$default-float}: none;

//     // Control the font color based on background brightness
//     @if $bg-lightness > 70%  or $bg == yellow { color: $input-prefix-font-color; }
//     @else { color: $input-prefix-font-color-alt; }
//   }

//   @if $border {
//     border-color: $border;
//   }

//   @if $is-button {
//     padding-#{$default-float}: 0;
//     padding-#{$opposite-direction}: 0;
//     padding-top: 0;
//     padding-bottom: 0;
//     text-align: center;
//     line-height: rem-calc(34);
//     border: none;
//   }

// }

// // We use this mixin to style fieldsets
// @mixin fieldset {
//   border: $fieldset-border-width $fieldset-border-style $fieldset-border-color;
//   padding: $fieldset-padding;
//   margin: $fieldset-margin;

//   // and legend styles
//   legend {
//     font-weight: $legend-font-weight;
//     background: $legend-bg;
//     padding: $legend-padding;
//     margin: 0;
//     margin-#{$default-float}: rem-calc(-3);
//   }
// }

// // @MIXIN
// //
// // We use this mixin to control border and background color of error inputs
// // $color - Default: $alert-color (found in settings file)
// @mixin form-error-color($color:$alert-color) {
//   border-color: $color;
//   background-color: rgba($color, 0.1);

//   // Go back to normal on focus
//   &:focus {
//     background: $input-focus-bg-color;
//     border-color: $input-focus-border-color;
//   }
// }

// // @MIXIN
// //
// // We use this simple mixin to style labels for error inputs
// // $color - Default:$alert-color. Found in settings file
// @mixin form-label-error-color($color:$alert-color) { color: $color; }

// // @MIXIN
// //
// // We use this mixin to create error message styles
// // $bg - Default: $alert-color (Found in settings file)
// @mixin form-error-message($bg:$alert-color) {
//   display: block;
//   padding: $input-error-message-padding;
//   margin-top: $input-error-message-top;
//   margin-bottom: $form-spacing;
//   font-size: $input-error-message-font-size;
//   font-weight: $input-error-message-font-weight;
//   font-style: $input-error-message-font-style;

//   // We can control the text color based on the brightness of the background.
//   $bg-lightness: lightness($bg);
//   background: $bg;
//   @if $bg-lightness < 70% or $bg == yellow { color: $input-error-message-font-color; }
//   @else { color: $input-error-message-font-color-alt; }
// }

// @include exports("form") {
//   @if $include-html-form-classes {
//     /* Standard Forms */
//     form { margin: 0 0 $form-spacing; }

//     /* Using forms within rows, we need to set some defaults */
//     form .row { @include form-row-base; }

//     /* Label Styles */
//     label { @include form-label;
//       &.right { @include form-label(right,false); }
//       &.inline { @include form-label(inline,false); }
//       /* Styles for required inputs */
//       small {
//         text-transform: capitalize;
//         color: scale-color($form-label-font-color, $lightness: 15%);
//       }
//     }

//     select {
//       -webkit-appearance: none !important;
//       background-color: $select-bg-color;
//       background-image: url('data:image/svg+xml;base64, PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgeD0iMHB4IiB5PSIwcHgiIHdpZHRoPSI2cHgiIGhlaWdodD0iM3B4IiB2aWV3Qm94PSIwIDAgNiAzIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA2IDMiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxwb2x5Z29uIHBvaW50cz0iNS45OTIsMCAyLjk5MiwzIC0wLjAwOCwwICIvPjwvc3ZnPg==');
//       background-repeat: no-repeat;
//       background-position: if($text-direction == 'rtl', 3%, 97%) center;
//       border: $input-border-width $input-border-style $input-border-color;
//       padding: $form-spacing / 2;
//       font-size: $input-font-size;
//       @include radius(0);
//       &.radius { @include radius($global-radius); }
//       &:hover {
//         background-color: $select-hover-bg-color;
//         border-color: $input-focus-border-color;
//       }
//     }

//     select::-ms-expand {
//       display:none;
//     }

//     @-moz-document url-prefix() {
//       select { background: $select-bg-color; }
//       select:hover { background: $select-hover-bg-color }
//     }
//     /* Attach elements to the beginning or end of an input */
//     .prefix,
//     .postfix { @include prefix-postfix-base; }

//     /* Adjust padding, alignment and radius if pre/post element is a button */
//     .postfix.button { @include button-size(false,false); @include postfix(false, false, true); }
//     .prefix.button { @include button-size(false,false); @include prefix(false, false, true); }

//     .prefix.button.radius { @include radius(0); @include side-radius($default-float, $button-radius); }
//     .postfix.button.radius { @include radius(0); @include side-radius($opposite-direction, $button-radius); }
//     .prefix.button.round { @include radius(0); @include side-radius($default-float, $button-round); }
//     .postfix.button.round { @include radius(0); @include side-radius($opposite-direction, $button-round); }

//     /* Separate prefix and postfix styles when on span or label so buttons keep their own */
//     span.prefix,label.prefix { @include prefix();
//       &.radius { @include radius(0); @include side-radius($default-float, $global-radius); }
//     }
//     span.postfix,label.postfix { @include postfix();
//       &.radius { @include radius(0); @include side-radius($opposite-direction, $global-radius); }
//     }

//     /* We use this to get basic styling on all basic form elements */
//     input[type="text"],
//     input[type="password"],
//     input[type="date"],
//     input[type="datetime"],
//     input[type="datetime-local"],
//     input[type="month"],
//     input[type="week"],
//     input[type="email"],
//     input[type="number"],
//     input[type="search"],
//     input[type="tel"],
//     input[type="time"],
//     input[type="url"],
//     textarea {
//       -webkit-appearance: none;
//       @include form-element;
//       @if not $input-include-glowing-effect {
//           @include single-transition(all, 0.15s, linear);
//       }
//       &.radius {
//         @include radius($input-border-radius);
//       }
//     }

//     /* Respect enforced amount of rows for textarea */
//     textarea[rows] {
//       height: auto;
//     }

//     /* Add height value for select elements to match text input height */
//     select {
//       height: ($input-font-size + ($form-spacing * 1.5) - rem-calc(1));
//     }

//     /* Adjust margin for form elements below */
//     input[type="file"],
//     input[type="checkbox"],
//     input[type="radio"],
//     select {
//       margin: 0 0 $form-spacing 0;
//     }

//     input[type="checkbox"] + label,
//     input[type="radio"] + label {
//       display: inline-block;
//       margin-#{$default-float}: $form-spacing * .5;
//       margin-#{$opposite-direction}: $form-spacing;
//       margin-bottom: 0;
//       vertical-align: baseline;
//     }

//     /* Normalize file input width */
//     input[type="file"] {
//       width:100%;
//     }

//     /* We add basic fieldset styling */
//     fieldset {
//       @include fieldset;
//     }

//     /* Error Handling */

//     #{data('abide')} {
//       .error small.error, span.error, small.error {
//         @include form-error-message;
//       }
//       span.error, small.error { display: none; }
//     }

//     span.error, small.error {
//       @include form-error-message;
//     }

//     .error {
//       input,
//       textarea,
//       select {
//         margin-bottom: 0;
//       }

//       input[type="checkbox"],
//       input[type="radio"] {
//         margin-bottom: $form-spacing
//       }

//       label,
//       label.error {
//         @include form-label-error-color;
//       }

//       small.error {
//         @include form-error-message;
//       }

//       > label {
//         > small {
//           color: scale-color($form-label-font-color, $lightness: 15%);
//           background: transparent;
//           padding: 0;
//           text-transform: capitalize;
//           font-style: normal;
//           font-size: 60%;
//           margin: 0;
//           display: inline;
//         }
//       }

//       span.error-message {
//         display: block;
//       }
//     }

//     input.error,
//     textarea.error {
//       margin-bottom: 0;
//     }
//     label.error { @include form-label-error-color; }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "../functions";
// //
// // Foundation Variables
// //

// // Data attribute namespace
// // styles get applied to [data-mysite-plugin], etc
// $namespace: false !default;

// $experimental: true !default;

// // The default font-size is set to 100% of the browser style sheet (usually 16px)
// // for compatibility with browser-based text zoom or user-set defaults.

// // Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// // If you want your base font-size to be different and not have it affect the grid breakpoints,
// // set $rem-base to $base-font-size and make sure $base-font-size is a px value.
// $base-font-size: 100% !default;

// // $base-line-height is 24px while $base-font-size is 16px
// $base-line-height: 150% !default;

// //
// // Global Foundation Mixins
// //

// // @mixins
// //
// // We use this to control border radius.
// // $radius - Default: $global-radius || 4px
// @mixin radius($radius:$global-radius) {
//   @if $radius {
//     @if $experimental {
//       -webkit-border-radius: $radius;
//     }
//     border-radius: $radius;
//   }
// }

// // @mixins
// //
// // We use this to create equal side border radius on elements.
// // $side - Options: left, right, top, bottom
// @mixin side-radius($side, $radius:$global-radius) {
//   @if ($side == left or $side == right) {
//     @if $experimental {
//       -moz-border-radius-bottom#{$side}: $radius;
//       -moz-border-radius-top#{$side}: $radius;
//       -webkit-border-bottom-#{$side}-radius: $radius;
//       -webkit-border-top-#{$side}-radius: $radius;
//     }
//     border-bottom-#{$side}-radius: $radius;
//     border-top-#{$side}-radius: $radius;
//   } @else {
//     @if $experimental {
//       -moz-border-radius-#{$side}left: $radius;
//       -moz-border-radius-#{$side}right: $radius;
//       -webkit-border-#{$side}-left-radius: $radius;
//       -webkit-border-#{$side}-right-radius: $radius;
//     }
//     border-#{$side}-left-radius: $radius;
//     border-#{$side}-right-radius: $radius;
//   }
// }

// // @mixins
// //
// // We can control whether or not we have inset shadows edges.
// // $active - Default: true, Options: false
// @mixin inset-shadow($active:true) {
//   @if $experimental {
//     -webkit-box-shadow: $shiny-edge-size $shiny-edge-color inset;
//   }
//   box-shadow: $shiny-edge-size $shiny-edge-color inset;

//   @if $active { &:active {
//     @if $experimental {
//       -webkit-box-shadow: $shiny-edge-size $shiny-edge-active-color inset;
//     }
//     box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
// }

// // @mixins
// //
// // We use this to add transitions to elements
// // $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// // $speed - Default: 300ms
// // $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
// @mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
//   @if $experimental {
//     -webkit-transition: $property $speed $ease;
//     -moz-transition: $property $speed $ease;
//   }
//   transition: $property $speed $ease;
// }

// // @mixins
// //
// // We use this to add box-sizing across browser prefixes
// @mixin box-sizing($type:border-box) {
//   @if $experimental {
//     -moz-box-sizing: $type;
//     -webkit-box-sizing: $type;
//   }
//   box-sizing: $type;
// }

// // @mixins
// //
// // We use this to create equilateral triangles
// // $triangle-size - Used to set border-size. No default, set a px or em size.
// // $triangle-color - Used to set border-color which makes up triangle. No default
// // $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
// @mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
//   content: "";
//   display: block;
//   width: 0;
//   height: 0;
//   border: inset $triangle-size;
//   @if ($triangle-direction == top) {
//     border-color: $triangle-color transparent transparent transparent;
//     border-top-style: solid;
//   }
//   @if ($triangle-direction == bottom) {
//     border-color: transparent transparent $triangle-color transparent;
//     border-bottom-style: solid;
//   }
//   @if ($triangle-direction == left) {
//     border-color: transparent transparent transparent $triangle-color;
//     border-left-style: solid;
//   }
//   @if ($triangle-direction == right) {
//     border-color: transparent $triangle-color transparent transparent;
//     border-right-style: solid;
//   }
// }

// // We use this to do clear floats
// @mixin clearfix {
//   *zoom:1;
//   &:before, &:after { content: " "; display: table; }
//   &:after { clear: both; }
// }

// // @mixins
// //
// // We use this to add a glowing effect to block elements
// // $selector - Used for selector state. Default: focus, Options: hover, active, visited
// // $fade-time - Default: 300ms
// // $glowing-effect-color - Default: fade-out($primary-color, .25)
// @mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
//   @if $experimental {
//     -webkit-transition: -webkit-box-shadow $fade-time, border-color $fade-time ease-in-out;
//     -moz-transition: -moz-box-shadow $fade-time, border-color $fade-time ease-in-out;
//   }
//   transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

//   &:#{$selector} {
//     @if $experimental {
//       -webkit-box-shadow: 0 0 5px $glowing-effect-color;
//       -moz-box-shadow: 0 0 5px $glowing-effect-color;
//     }
//     box-shadow: 0 0 5px $glowing-effect-color;
//     border-color: $glowing-effect-color;
//   }
// }

// // @mixins
// //
// // We use this to translate elements in 2D
// // $horizontal: Default: 0
// // $vertical: Default: 0
// @mixin translate2d($horizontal:0, $vertical:0) {
//   @if $experimental {
//     -webkit-transform: translate($horizontal,$vertical);
//     -moz-transform: translate($horizontal,$vertical);
//     -ms-transform: translate($horizontal,$vertical);
//     -o-transform: translate($horizontal,$vertical);
//   }
//   transform: translate($horizontal,$vertical)
// }

// // @mixins
// //
// // Makes an element visually hidden, but accessible.
// // @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// @mixin element-invisible {
//   position: absolute !important;
//   height: 1px;
//   width: 1px;
//   overflow: hidden;
//   clip: rect(1px, 1px, 1px, 1px);
// }

// // @mixins
// //
// // Turns off the element-invisible effect.
// @mixin element-invisible-off {
//   position: static !important;
//   height: auto;
//   width: auto;
//   overflow: visible;
//   clip: auto;
// }

// // We use these to control various global styles
// $body-bg: #fff !default;
// $body-font-color: #222 !default;
// $body-font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif !default;
// $body-font-weight: normal !default;
// $body-font-style: normal !default;

// // We use this to control font-smoothing
// $font-smoothing: antialiased !default;

// // We use these to control text direction settings
// $text-direction: ltr !default;
// $default-float: left !default;
// $opposite-direction: right !default;
// @if $text-direction == ltr {
//   $default-float: left;
//   $opposite-direction: right;
// } @else {
//   $default-float: right;
//   $opposite-direction: left;
// }
// // We use these as default colors throughout
// $primary-color: #008CBA !default;
// $secondary-color: #e7e7e7 !default;
// $alert-color: #f04124 !default;
// $success-color: #43AC6A !default;
// $success-color: #aaa !default;
// $warning-color: #f08a24 !default;
// $info-color: #a0d3e8 !default;

// // We use these to make sure border radius matches unless we want it different.
// $global-radius: 3px !default;
// $global-rounded: 1000px !default;

// // We use these to control inset shadow shiny edges and depressions.
// $shiny-edge-size: 0 1px 0 !default;
// $shiny-edge-color: rgba(#fff, .5) !default;
// $shiny-edge-active-color: rgba(#000, .2) !default;

// // We use this to control whether or not CSS classes come through in the gem files.
// $include-html-classes: true !default;
// $include-print-styles: true !default;
// $include-html-global-classes: $include-html-classes !default;


// // Media Query Ranges
// $small-range: (0em, 40em) !default;
// $medium-range: (40.063em, 64em) !default;
// $large-range: (64.063em, 90em) !default;
// $xlarge-range: (90.063em, 120em) !default;
// $xxlarge-range: (120.063em, 99999999em) !default;


// $screen: "only screen" !default;

// $landscape: "#{$screen} and (orientation: landscape)" !default;
// $portrait: "#{$screen} and (orientation: portrait)" !default;

// $small-up: $screen !default;
// $small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

// $medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
// $medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

// $large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
// $large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

// $xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
// $xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

// $xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
// $xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

// // Legacy
// $small: $medium-up;
// $medium: $medium-up;
// $large: $large-up;


// //We use this as cursors values for enabling the option of having custom cursors in the whole site's stylesheet
// $cursor-crosshair-value: crosshair !default;
// $cursor-default-value: default !default;
// $cursor-pointer-value: pointer !default;
// $cursor-help-value: help !default;
// $cursor-text-value: text !default;


// @include exports("global") {

//   @if $include-html-global-classes {

//     meta.foundation-version {
//       font-family: "/5.2.1/";
//     }
//     // Used to provide media query values for javascript components.
//     // Forward slash placed around everything to convince PhantomJS to read the value.
//     meta.foundation-mq-small {
//       font-family: "/" + unquote($small-only) + "/";
//       width: lower-bound($small-range);
//     }

//     meta.foundation-mq-medium {
//       font-family: "/" + unquote($medium-up) + "/";
//       width: lower-bound($medium-range);
//     }

//     meta.foundation-mq-large {
//       font-family: "/" + unquote($large-up) + "/";
//       width: lower-bound($large-range);
//     }

//     meta.foundation-mq-xlarge {
//       font-family: "/" + unquote($xlarge-up) + "/";
//       width: lower-bound($xlarge-range);
//     }

//     meta.foundation-mq-xxlarge {
//       font-family: "/" + unquote($xxlarge-up) + "/";
//       width: lower-bound($xxlarge-range);
//     }

//     meta.foundation-data-attribute-namespace {
//       font-family: #{$namespace};
//     }

//     // Must be 100% for off canvas to work
//     html, body { height: 100%; }

//     // Set box-sizing globally to handle padding and border widths
//     *,
//     *:before,
//     *:after {
//       @include box-sizing(border-box);
//     }

//     html,
//     body { font-size: $base-font-size; }

//     // Default body styles
//     body {
//       background: $body-bg;
//       color: $body-font-color;
//       padding: 0;
//       margin: 0;
//       font-family: $body-font-family;
//       font-weight: $body-font-weight;
//       font-style: $body-font-style;
//       line-height: 1; // Set to $base-line-height to take on browser default of 150%
//       position: relative;
//       cursor: $cursor-default-value;
//     }

//   a:hover { cursor: $cursor-pointer-value; }

//     // Grid Defaults to get images and embeds to work properly
//     img { max-width: 100%; height: auto; }

//     img { -ms-interpolation-mode: bicubic; }

//     #map_canvas,
//     .map_canvas {
//       img,
//       embed,
//       object { max-width: none !important;
//       }
//     }

//     // Miscellaneous useful HTML classes
//     .left   { float: left !important; }
//     .right  { float: right !important; }
//     .clearfix     { @include clearfix; }
//     .hide         { display: none; }

//     // Font smoothing
//     // Antialiased font smoothing works best for light text on a dark background.
//     // Apply to single elements instead of globally to body.
//     // Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
//     .antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }

//     // Get rid of gap under images by making them display: inline-block; by default
//     img {
//       display: inline-block;
//       vertical-align: middle;
//     }

//     //
//     // Global resets for forms
//     //

//     // Make sure textarea takes on height automatically
//     textarea { height: auto; min-height: 50px; }

//     // Make select elements 100% width by default
//     select { width: 100%; }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-grid-classes: $include-html-classes !default;
// $include-xl-html-grid-classes: false !default;

// $row-width: rem-calc(1000) !default;
// $column-gutter: rem-calc(30) !default;
// $total-columns: 12 !default;

// //
// // Grid Functions
// //

// // Deprecated: We'll drop support for this in 5.1, use grid-calc()
// @function gridCalc($colNumber, $totalColumns) {
//   @warn "gridCalc() is deprecated, use grid-calc()";
//   @return grid-calc($colNumber, $totalColumns);
// }

// // @FUNCTION
// // $colNumber - Found in settings file
// // $totalColumns - Found in settings file
// @function grid-calc($colNumber, $totalColumns) {
//   @return percentage(($colNumber / $totalColumns));
// }

// //
// // @mixins
// //

// // For creating container, nested, and collapsed rows.
// //
// //
// // $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
// @mixin grid-row($behavior: false) {

//   // use @include grid-row(nest); to include a nested row
//   @if $behavior == nest {
//     width: auto;
//     margin-#{$default-float}: -($column-gutter/2);
//     margin-#{$opposite-direction}: -($column-gutter/2);
//     margin-top: 0;
//     margin-bottom: 0;
//     max-width: none;
//   }

//   // use @include grid-row(collapse); to collapsed a container row margins
//   @else if $behavior == collapse {
//     width: 100%;
//     margin: 0;
//     max-width: $row-width;
//   }

//   // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
//   @else if $behavior == nest-collapse {
//     width: auto;
//     margin: 0;
//     max-width: none;
//   }

//   // use @include grid-row; to use a container row
//   @else {
//     width: 100%;
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     margin-top: 0;
//     margin-bottom: 0;
//     max-width: $row-width;
//   }

//   // Clearfix for all rows
//   @include clearfix();
// }

// // Creates a column, should be used inside of a media query to control layouts
// //
// // $columns - The number of columns this should be
// // $last-column - Is this the last column? Default: false.
// // $center - Center these columns? Default: false.
// // $offset - # of columns to offset. Default: false.
// // $push - # of columns to push. Default: false.
// // $pull - # of columns to pull. Default: false.
// // $collapse - Get rid of gutter padding on column? Default: false.
// // $float - Should this float? Default: true. Options: true, false, left, right.
// @mixin grid-column(
//   $columns:false,
//   $last-column:false,
//   $center:false,
//   $offset:false,
//   $push:false,
//   $pull:false,
//   $collapse:false,
//   $float:true,
//   $position:false) {

//   // If positioned for default .column, include relative position
//   // push and pull require position set
//   @if $position or $push or $pull {
//     position: relative;
//   }

//   // If collapsed, get rid of gutter padding
//   @if $collapse {
//     padding-left: 0;
//     padding-right: 0;
//   }

//   // Gutter padding whenever a column isn't set to collapse
//   // (use $collapse:null to do nothing)
//   @else if $collapse == false {
//     padding-left: $column-gutter / 2;
//     padding-right: $column-gutter / 2;
//   }

//   // If a column number is given, calculate width
//   @if $columns {
//     width: grid-calc($columns, $total-columns);

//     // If last column, float naturally instead of to the right
//     @if $last-column { float: $opposite-direction; }
//   }

//   // Source Ordering, adds left/right depending on which you use.
//   @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
//   @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

//   @if $float {
//     @if $float == left or $float == true { float: $default-float; }
//     @else if $float == right { float: $opposite-direction; }
//     @else { float: none; }
//   }

//   // If centered, get rid of float and add appropriate margins
//   @if $center {
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     float: none !important;
//   }

//   // If offset, calculate appropriate margins
//   @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

// }

// // Create presentational classes for grid
// //
// // $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
// @mixin grid-html-classes($size) {

//   .column.#{$size}-centered,
//   .columns.#{$size}-centered { @include grid-column($center:true, $collapse:null, $float:false); }

//   .column.#{$size}-uncentered,
//   .columns.#{$size}-uncentered {
//     margin-#{$default-float}: 0;
//     margin-#{$opposite-direction}: 0;
//     float: $default-float !important;
//   }

//   .column.#{$size}-uncentered.opposite,
//   .columns.#{$size}-uncentered.opposite {
//     float: $opposite-direction;
//   }

//   @for $i from 0 through $total-columns - 1 {
//     .#{$size}-push-#{$i} {
//       @include grid-column($push:$i, $collapse:null, $float:false);
//     }
//     .#{$size}-pull-#{$i} {
//       @include grid-column($pull:$i, $collapse:null, $float:false);
//     }
//   }

//   .column,
//   .columns { @include grid-column($columns:false, $position:true); }


//   @for $i from 1 through $total-columns {
//     .#{$size}-#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//   }

//   [class*="column"] + [class*="column"]:last-child { float: $opposite-direction; }
//   [class*="column"] + [class*="column"].end { float: $default-float; }


//   @for $i from 0 through $total-columns - 1 {
//     .#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//   }
//   .#{$size}-reset-order,
//   .#{$size}-reset-order {
//     margin-#{$default-float}: 0;
//     margin-#{$opposite-direction}: 0;
//     left: auto;
//     right: auto;
//     float: $default-float;
//   }
// }

// @include exports("grid") {
//   @if $include-html-grid-classes {
//     .row {
//       @include grid-row;

//       &.collapse {
//          > .column,
//          > .columns { @include grid-column($collapse:true, $float:false); }

//         .row {margin-left:0; margin-right:0;}
//       }

//       .row { @include grid-row($behavior:nest);
//         &.collapse { @include grid-row($behavior:nest-collapse); }
//       }
//     }

//     .column,
//     .columns { @include grid-column($columns:$total-columns); }

//     @media #{$small-up} {
//       @include grid-html-classes($size:small);
//     }

//     @media #{$medium-up} {
//       @include grid-html-classes($size:medium);
//       // Old push and pull classes
//       @for $i from 0 through $total-columns - 1 {
//         .push-#{$i} {
//           @include grid-column($push:$i, $collapse:null, $float:false);
//         }
//         .pull-#{$i} {
//           @include grid-column($pull:$i, $collapse:null, $float:false);
//         }
//       }
//     }
//     @media #{$large-up} {
//       @include grid-html-classes($size:large);
//       @for $i from 0 through $total-columns - 1 {
//         .push-#{$i} {
//           @include grid-column($push:$i, $collapse:null, $float:false);
//         }
//         .pull-#{$i} {
//           @include grid-column($pull:$i, $collapse:null, $float:false);
//         }
//       }
//     }
//   }
//   @if $include-xl-html-grid-classes {
//     @media #{$xlarge-up} {
//       @include grid-html-classes($size:xlarge);
//     }
//     @media #{$xxlarge-up} {
//       @include grid-html-classes($size:xxlarge);
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-inline-list-classes: $include-html-classes !default;

// // We use this to control the margins and padding of the inline list.
// $inline-list-top-margin: 0 !default;
// $inline-list-opposite-margin: 0 !default;
// $inline-list-bottom-margin: rem-calc(17) !default;
// $inline-list-default-float-margin: rem-calc(-22) !default;

// $inline-list-padding: 0 !default;

// // We use this to control the overflow of the inline list.
// $inline-list-overflow: hidden !default;

// // We use this to control the list items
// $inline-list-display: block !default;

// // We use this to control any elements within list items
// $inline-list-children-display: block !default;

// //
// // @mixins
// //
// // We use this mixin to create inline lists
// @mixin inline-list {
//   margin: $inline-list-top-margin auto $inline-list-bottom-margin auto;
//   margin-#{$default-float}: $inline-list-default-float-margin;
//   margin-#{$opposite-direction}: $inline-list-opposite-margin;
//   padding: $inline-list-padding;
//   list-style: none;
//   overflow: $inline-list-overflow;

//   & > li {
//     list-style: none;
//     float: $default-float;
//     margin-#{$default-float}: rem-calc(22);
//     display: $inline-list-display;
//     &>* { display: $inline-list-children-display; }
//   }
// }

// @include exports("inline-list") {
//   @if $include-html-inline-list-classes {
//     .inline-list {
//       @include inline-list();
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-joyride-classes: $include-html-classes !default;

// // Controlling default Joyride styles
// $joyride-tip-bg: #333 !default;
// $joyride-tip-default-width: 300px !default;
// $joyride-tip-padding: rem-calc(18 20 24) !default;
// $joyride-tip-border: solid 1px #555 !default;
// $joyride-tip-radius: 4px !default;
// $joyride-tip-position-offset: 22px !default;

// // Here, we're setting the tip font styles
// $joyride-tip-font-color: #fff !default;
// $joyride-tip-font-size: rem-calc(14) !default;
// $joyride-tip-header-weight: bold !default;

// // This changes the nub size
// $joyride-tip-nub-size: 10px !default;

// // This adjusts the styles for the timer when its enabled
// $joyride-tip-timer-width: 50px !default;
// $joyride-tip-timer-height: 3px !default;
// $joyride-tip-timer-color: #666 !default;

// // This changes up the styles for the close button
// $joyride-tip-close-color: #777 !default;
// $joyride-tip-close-size: 24px !default;
// $joyride-tip-close-weight: normal !default;

// // When Joyride is filling the screen, we use this style for the bg
// $joyride-screenfill: rgba(0,0,0,0.5) !default;


// // We decided not to make a mixin for this because it relies on
// // predefined classes to work properly.
// @include exports("joyride") {
//   @if $include-html-joyride-classes {

//     /* Foundation Joyride */
//     .joyride-list { display: none; }

//     /* Default styles for the container */
//     .joyride-tip-guide {
//       display: none;
//       position: absolute;
//       background: $joyride-tip-bg;
//       color: $joyride-tip-font-color;
//       z-index: 101;
//       top: 0;
//       #{$default-float}: 2.5%;
//       font-family: inherit;
//       font-weight: normal;
//       width: 95%;
//     }

//     .lt-ie9 .joyride-tip-guide {
//       max-width:800px;
//       #{$default-float}: 50%;
//       margin-#{$default-float}:-400px;
//     }

//     .joyride-content-wrapper {
//       width: 100%;

//       padding: $joyride-tip-padding;

//       .button { margin-bottom: 0 !important; }
//     }

//     /* Add a little css triangle pip, older browser just miss out on the fanciness of it */
//     .joyride-tip-guide {
//       .joyride-nub {
//         display: block;
//         position: absolute;
//         #{$default-float}: $joyride-tip-position-offset;
//         width: 0;
//         height: 0;
//         border: $joyride-tip-nub-size solid $joyride-tip-bg;

//         &.top {
//           border-top-style: solid;
//           border-color: $joyride-tip-bg;
//           border-top-color: transparent !important;
//           border-#{$default-float}-color: transparent !important;
//           border-#{$opposite-direction}-color: transparent !important;
//           top: -($joyride-tip-nub-size*2);
//         }
//         &.bottom {
//           border-bottom-style: solid;
//           border-color: $joyride-tip-bg !important;
//           border-bottom-color: transparent !important;
//           border-#{$default-float}-color: transparent !important;
//           border-#{$opposite-direction}-color: transparent !important;
//           bottom: -($joyride-tip-nub-size*2);
//         }

//         &.right { right: -($joyride-tip-nub-size*2); }
//         &.left { left: -($joyride-tip-nub-size*2); }
//       }
//     }

//     /* Typography */
//     .joyride-tip-guide h1,
//     .joyride-tip-guide h2,
//     .joyride-tip-guide h3,
//     .joyride-tip-guide h4,
//     .joyride-tip-guide h5,
//     .joyride-tip-guide h6 {
//       line-height: 1.25;
//       margin: 0;
//       font-weight: $joyride-tip-header-weight;
//       color: $joyride-tip-font-color;
//     }
//     .joyride-tip-guide p {
//       margin: rem-calc(0 0 18 0);
//       font-size: $joyride-tip-font-size;
//       line-height: 1.3;
//     }

//     .joyride-timer-indicator-wrap {
//       width: $joyride-tip-timer-width;
//       height: $joyride-tip-timer-height;
//       border: $joyride-tip-border;
//       position: absolute;
//       #{$opposite-direction}: rem-calc(17);
//       bottom: rem-calc(16);
//     }
//     .joyride-timer-indicator {
//       display: block;
//       width: 0;
//       height: inherit;
//       background: $joyride-tip-timer-color;
//     }

//     .joyride-close-tip {
//       position: absolute;
//       #{$opposite-direction}: 12px;
//       top: 10px;
//       color: $joyride-tip-close-color !important;
//       text-decoration: none;
//       font-size: $joyride-tip-close-size;
//       font-weight: $joyride-tip-close-weight;
//       line-height: .5 !important;

//       &:hover,
//       &:focus { color: #eee !important; }
//     }

//     .joyride-modal-bg {
//       position: fixed;
//       height: 100%;
//       width: 100%;
//       background: transparent;
//       background: $joyride-screenfill;
//       z-index: 100;
//       display: none;
//       top: 0;
//       #{$default-float}: 0;
//       cursor: $cursor-pointer-value;
//     }

//     .joyride-expose-wrapper {
//       background-color: #ffffff;
//       position: absolute;
//       border-radius: 3px;
//       z-index: 102;
//       @if $experimental {
//         -moz-box-shadow: 0 0 30px #ffffff;
//         -webkit-box-shadow: 0 0 15px #ffffff;
//       }
//       box-shadow: 0 0 15px #ffffff;
//     }

//     .joyride-expose-cover {
//       background: transparent;
//       border-radius: 3px;
//       position: absolute;
//       z-index: 9999;
//       top: 0;
//       left: 0;
//     }


//     /* Styles for screens that are at least 768px; */
//     @media #{$small} {
//       .joyride-tip-guide { width: $joyride-tip-default-width; #{$default-float}: inherit;
//         .joyride-nub {
//           &.bottom {
//             border-color: $joyride-tip-bg !important;
//             border-bottom-color: transparent !important;
//             border-#{$default-float}-color: transparent !important;
//             border-#{$opposite-direction}-color: transparent !important;
//             bottom: -($joyride-tip-nub-size*2);
//           }
//           &.right {
//             border-color: $joyride-tip-bg !important;
//             border-top-color: transparent !important;
//             border-right-color: transparent !important; border-bottom-color: transparent !important;
//             top: $joyride-tip-position-offset;
//             left: auto;
//             right: -($joyride-tip-nub-size*2);
//           }
//           &.left {
//             border-color: $joyride-tip-bg !important;
//             border-top-color: transparent !important;
//             border-left-color: transparent !important;
//             border-bottom-color: transparent !important;
//             top: $joyride-tip-position-offset;
//             left: -($joyride-tip-nub-size*2);
//             right: auto;
//           }
//         }
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-keystroke-classes: $include-html-classes !default;

// // We use these to control text styles.
// $keystroke-font: "Consolas", "Menlo", "Courier", monospace !default;
// $keystroke-font-size: inherit !default;
// $keystroke-font-color: #222 !default;
// $keystroke-font-color-alt: #fff !default;
// $keystroke-function-factor: -7% !default;

// // We use this to control keystroke padding.
// $keystroke-padding: rem-calc(2 4 0) !default;

// // We use these to control background and border styles.
// $keystroke-bg: scale-color(#fff, $lightness: $keystroke-function-factor) !default;
// $keystroke-border-style: solid !default;
// $keystroke-border-width: 1px !default;
// $keystroke-border-color: scale-color($keystroke-bg, $lightness: $keystroke-function-factor) !default;
// $keystroke-radius: $global-radius !default;

// //
// // @mixins
// //
// // We use this mixin to create keystroke styles.
// // $bg - Default: $keystroke-bg || scale-color(#fff, $lightness: $keystroke-function-factor) !default;
// @mixin keystroke($bg:$keystroke-bg) {
//   // This find the lightness percentage of the background color.
//   $bg-lightness: lightness($bg);

//   background-color: $bg;
//   border-color: scale-color($bg, $lightness: $keystroke-function-factor);

//   // We adjust the font color based on the brightness of the background.
//   @if $bg-lightness > 70% { color: $keystroke-font-color; }
//   @else { color: $keystroke-font-color-alt; }

//   border-style: $keystroke-border-style;
//   border-width: $keystroke-border-width;
//   margin: 0;
//   font-family: $keystroke-font;
//   font-size: $keystroke-font-size;
//   padding: $keystroke-padding;
// }

// @include exports("keystroke") {
//   @if $include-html-keystroke-classes  {
//     .keystroke,
//     kbd {
//       @include keystroke;
//       @include radius($keystroke-radius);
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-label-classes: $include-html-classes !default;

// // We use these to style the labels
// $label-padding: rem-calc(4 8 6) !default;
// $label-radius: $global-radius !default;

// // We use these to style the label text
// $label-font-sizing: rem-calc(11) !default;
// $label-font-weight: normal !default;
// $label-font-color: #333 !default;
// $label-font-color-alt: #fff !default;
// $label-font-family: $body-font-family !default;

// //
// // @mixins
// //
// // We use this mixin to create a default label base.
// @mixin label-base {
//   font-weight: $label-font-weight;
//   font-family: $label-font-family;
//   text-align: center;
//   text-decoration: none;
//   line-height: 1;
//   white-space: nowrap;
//   display: inline-block;
//   position: relative;
//   margin-bottom: inherit;
// }

// // @mixins
// //
// // We use this mixin to add label size styles.
// // $padding - Used to determine label padding. Default: $label-padding || rem-calc(3 10 4) !default
// // $text-size - Used to determine label text-size. Default: $text-size found in settings
// @mixin label-size($padding:$label-padding, $text-size:$label-font-sizing) {
//   @if $padding { padding: $padding; }
//   @if $text-size { font-size: $text-size; }
// }

// // @mixins
// //
// // We use this mixin to add label styles.
// // $bg - Default: $primary-color (found in settings file)
// // $radius - Default: false, Options: true, sets radius to $global-radius (found in settings file)
// @mixin label-style($bg:$primary-color, $radius:false) {

//   // We control which background color comes through
//   @if $bg {

//     // This find the lightness percentage of the background color.
//     $bg-lightness: lightness($bg);

//     background-color: $bg;

//     // We control the text color for you based on the background color.
//     @if $bg-lightness < 70% { color: $label-font-color-alt; }
//     @else { color: $label-font-color; }
//   }

//   // We use this to control the radius on labels.
//   @if $radius == true { @include radius($label-radius); }
//   @else if $radius { @include radius($radius); }

// }

// // @mixins
// //
// // We use this to add close buttons to alerts
// // $padding - Default: $label-padding,
// // $text-size - Default: $label-font-sizing,
// // $bg - Default: $primary-color(found in settings file)
// // $radius - Default: false, Options: true which sets radius to $global-radius (found in settings file)
// @mixin label($padding:$label-padding, $text-size:$label-font-sizing, $bg:$primary-color, $radius:false) {

//   @include label-base;
//   @include label-size($padding, $text-size);
//   @include label-style($bg, $radius);
// }

// @include exports("label") {
//   @if $include-html-label-classes {
//     .label {
//       @include label-base;
//       @include label-size;
//       @include label-style;

//       &.radius { @include label-style(false, true); }
//       &.round { @include label-style(false, $radius:1000px); }

//       &.alert     { @include label-style($alert-color); }
//       &.success   { @include label-style($success-color); }
//       &.secondary { @include label-style($secondary-color); }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-magellan-classes: $include-html-classes !default;

// $magellan-bg: #fff !default;
// $magellan-padding: 10px !default;

// @include exports("magellan") {
//   @if $include-html-magellan-classes {

//     #{data('magellan-expedition')} {
//       background: $magellan-bg;
//       z-index: 50;
//       min-width: 100%;
//       padding: $magellan-padding;

//       .sub-nav {
//         margin-bottom: 0;
//         dd { margin-bottom: 0; }
//         a {
//           line-height: 1.8em;
//         }
//       }
//     }

//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "type";
// @import "top-bar";

// // Off Canvas Tab Bar Variables
// $include-html-off-canvas-classes: $include-html-classes !default;

// $tabbar-bg: #333 !default;
// $tabbar-height: rem-calc(45) !default;
// $tabbar-line-height: $tabbar-height !default;
// $tabbar-color: #fff !default;
// $tabbar-middle-padding: 0 rem-calc(10) !default;

// // Off Canvas Divider Styles
// $tabbar-left-section-border: solid 1px scale-color($tabbar-bg, $lightness: -50%) !default;
// $tabbar-right-section-border: $tabbar-left-section-border;


// // Off Canvas Tab Bar Headers
// $tabbar-header-color: #fff !default;
// $tabbar-header-weight: bold !default;
// $tabbar-header-line-height: $tabbar-height !default;
// $tabbar-header-margin: 0 !default;

// // Off Canvas Menu Variables
// $off-canvas-width: rem-calc(250) !default;
// $off-canvas-bg: #333 !default;

// // Off Canvas Menu List Variables
// $off-canvas-label-padding: 0.3rem rem-calc(15) !default;
// $off-canvas-label-color: #999 !default;
// $off-canvas-label-text-transform: uppercase !default;
// $off-canvas-label-font-weight: bold !default;
// $off-canvas-label-bg: #444 !default;
// $off-canvas-label-border-top: 1px solid scale-color($off-canvas-label-bg, $lightness: 14%) !default;
// $off-canvas-label-border-bottom: none !default;
// $off-canvas-label-margin:0 !default;
// $off-canvas-link-padding: rem-calc(10, 15) !default;
// $off-canvas-link-color: rgba(#FFF, 0.7) !default;
// $off-canvas-link-border-bottom: 1px solid scale-color($off-canvas-bg, $lightness: -25%) !default;

// // Off Canvas Menu Icon Variables
// $tabbar-menu-icon-color: #FFF !default;
// $tabbar-menu-icon-hover: scale-color($tabbar-menu-icon-color, $lightness: -30%) !default;

// $tabbar-menu-icon-text-indent: rem-calc(35) !default;
// $tabbar-menu-icon-width: $tabbar-height !default;
// $tabbar-menu-icon-height: $tabbar-height !default;
// $tabbar-menu-icon-line-height: rem-calc(33) !default;
// $tabbar-menu-icon-padding: 0 !default;

// $tabbar-hamburger-icon-width: rem-calc(16) !default;
// $tabbar-hamburger-icon-left: false !default;
// $tabbar-hamburger-icon-top: false !default;
// $tapbar-hamburger-icon-thickness: 1px !default;
// $tapbar-hamburger-icon-gap: 6px !default;

// // Off Canvas Back-Link Overlay
// $off-canvas-overlay-transition: background 300ms ease !default;
// $off-canvas-overlay-cursor: pointer !default;
// $off-canvas-overlay-box-shadow: -4px 0 4px rgba(#000, 0.5), 4px 0 4px rgba(#000, 0.5) !default;
// $off-canvas-overlay-background: rgba(#FFF, 0.2) !default;
// $off-canvas-overlay-background-hover: rgba(#FFF, 0.05) !default;

// // Transition Variables
// $menu-slide: "transform 500ms ease" !default;


// // MIXINS
// // Remove transition flicker on phones
// @mixin kill-flicker {
//   // -webkit-transform: translateZ(0x);
//   -webkit-backface-visibility: hidden;
// }

// // Basic properties for the content wraps
// @mixin wrap-base {
//   position: relative;
//   width: 100%;
// }

// // basic styles for off-canvas menu container
// @mixin off-canvas-menu($position) {
//   @include kill-flicker;
//   * { @include kill-flicker; }
//   width: $off-canvas-width;
//   top: 0;
//   bottom: 0;
//   position: absolute;
//   overflow-y: auto;
//   background: $off-canvas-bg;
//   z-index: 1001;
//   box-sizing: content-box;
//   -webkit-overflow-scrolling: touch;
//   @if $position == left {
//     @include translate3d(-100%,0,0);
//     left: 0;
//   }
//   @if $position == right {
//     @include translate3d(100%,0,0);
//     right: 0;
//   }
// }

// // TRANSLATE 3D
// @mixin translate3d($tx,$ty,$tz) {
//   -webkit-transform: translate3d($tx,$ty,$tz);
//   -moz-transform: translate3d($tx,$ty,$tz);
//   -ms-transform: translate3d($tx,$ty,$tz);
//   -o-transform: translate3d($tx,$ty,$tz);
//   transform: translate3d($tx,$ty,$tz)
// }

// // OFF CANVAS WRAP
// // Wrap visible content and prevent scroll bars
// @mixin off-canvas-wrap {
//   @include kill-flicker;
//   @include wrap-base;
//   overflow-x: hidden;
//   &.move-right,
//   &.move-left { height: 100%; }
// }

// // INNER WRAP
// // Main content area that moves to reveal the off-canvas nav
// @mixin inner-wrap {
//   @include kill-flicker;
//   @include wrap-base;
//   @include clearfix;
//   -webkit-transition: -webkit-#{$menu-slide};
//   -moz-transition: -moz-#{$menu-slide};
//   -ms-transition: -ms-#{$menu-slide};
//   -o-transition: -o-#{$menu-slide};
//   transition: #{$menu-slide};
// }

// // TAB BAR
// // This is the tab bar base
// @mixin tab-bar-base {
//   @include kill-flicker;

//   // base styles
//   background: $tabbar-bg;
//   color: $tabbar-color;
//   height: $tabbar-height;
//   line-height: $tabbar-height;

//   // make sure it's below the .exit-offcanvas link
//   position: relative;
//   // z-index: 999;

//   // Typography
//   h1,h2,h3,h4,h5,h6 {
//     color: $tabbar-header-color;
//     font-weight: $tabbar-header-weight;
//     line-height: $tabbar-header-line-height;
//     margin: $tabbar-header-margin;
//   }
//   h1,h2,h3,h4 { font-size: $h5-font-size; }
// }

// // SMALL SECTIONS
// // These are small sections on the left and right that contain the off-canvas toggle buttons;
// @mixin tabbar-small-section($position) {
//   width: $tabbar-height;
//   height: $tabbar-height;
//   position: absolute;
//   top: 0;
//   @if $position == left {
//     border-right: $tabbar-left-section-border;
//     // box-shadow: 1px 0 0 scale-color($tabbar-bg, $lightness: 13%);
//     left: 0;
//   }
//   @if $position == right {
//     border-left: $tabbar-right-section-border;
//     // box-shadow: -1px 0 0 scale-color($tabbar-bg, $lightness: -50%);
//     right:0;
//   }
// }

// @mixin tab-bar-section {
//   padding: $tabbar-middle-padding;
//   position: absolute;
//   text-align: center;
//   height: $tabbar-height;
//   top: 0;
//   @media #{$medium-up} { text-align: left; }

//   // still need to make these non-presentational
//   &.left {
//     left: 0;
//     right: $tabbar-height;
//   }
//   &.right {
//     left: $tabbar-height;
//     right: 0;
//   }
//   &.middle {
//     left: $tabbar-height;
//     right: $tabbar-height;
//   }
// }

// // OFF CANVAS LIST
// // This is the list of links in the off-canvas menu
// @mixin off-canvas-list {
//   list-style-type: none;
//   padding:0;
//   margin:0;

//   li {
//     label {
//       padding: $off-canvas-label-padding;
//       color: $off-canvas-label-color;
//       text-transform: $off-canvas-label-text-transform;
//       font-weight: $off-canvas-label-font-weight;
//       background: $off-canvas-label-bg;
//       border-top: $off-canvas-label-border-top;
//       border-bottom: $off-canvas-label-border-bottom;
//       margin: $off-canvas-label-margin;
//     }
//     a {
//       display: block;
//       padding: $off-canvas-link-padding;
//       color: $off-canvas-link-color;
//       border-bottom: $off-canvas-link-border-bottom;
//       &:hover { background: scale-color($tabbar-bg, $lightness: -30%); }
//       transition: background 300ms ease;
//     }
//   }

// }

// // BACK LINK
// // This is an overlay that, when clicked, will toggle off the off canvas menu
// @mixin back-link {
//     @include kill-flicker;

//     transition: $off-canvas-overlay-transition;
//     cursor: $off-canvas-overlay-cursor;
//     box-shadow: $off-canvas-overlay-box-shadow;

//     // fill the screen
//     display: block;
//     position: absolute;
//     background: $off-canvas-overlay-background;
//     top: 0;
//     bottom: 0;
//     left:0;
//     right:0;
//     z-index: 1002;
//     -webkit-tap-highlight-color: rgba(0,0,0,0);

//     @media #{$medium-up} {
//       &:hover {
//         background: $off-canvas-overlay-background-hover;
//       }
//     }
// }

// // @MIXIN
// //
// // We use this mixin to generate hamburger icon
// //
// // $width - Width of hamburger icon in rem Default: $tabbar-hamburger-icon-width.
// // $left - If false, icon will be centered horizontally || explicitly set value in rem Default: $tabbar-hamburger-icon-left= False
// // $top - If false, icon will be centered vertically || explicitly set value in rem Default: $tabbar-hamburger-icon-top= False
// // $thickness - thickness of lines in hamburger icon, set value in px Default: $tapbar-hamburger-icon-thickness = 1px
// // $gap - spacing between the lines in hamburger icon, set value in px Default: $tapbar-hamburger-icon-gap = 6px
// // $color - icon color Default: $tabbar-menu-icon-color
// // $hover-color - icon color when hovered Default: $tabbar-menu-icon-hover
// @mixin hamburger($width:$tabbar-hamburger-icon-width,
//                  $left: $tabbar-hamburger-icon-left,
//                  $top: $tabbar-hamburger-icon-top,
//                  $thickness:$tapbar-hamburger-icon-thickness,
//                  $gap:$tapbar-hamburger-icon-gap,
//                  $color:$tabbar-menu-icon-color,
//                  $hover-color:$tabbar-menu-icon-hover) {
//   span {
//     position: absolute;
//     display: block;
//     height: 0;
//     width: $width;

//     // disable height centering if $top is not false
//     @if $top {
//       top: $tabbar-hamburger-icon-top;
//     }
//     @else {
//       top: ($tabbar-menu-icon-height - rem-calc(3 * $thickness) - rem-calc(2 * $gap))/2;
//     }
//     // disable width centering if $top is not false
//     @if $left {
//       left: $tabbar-hamburger-icon-left;
//     }
//     @else {
//       left: ($tabbar-menu-icon-width - $width)/2;
//     }
//     @if $experimental {
//       -webkit-box-shadow: 1px 0px                       1px $thickness $color,
//                           1px ($gap + $thickness)       1px $thickness $color,
//                           1px (2*$gap + 2*$thickness)   1px $thickness $color;
//     }
//       box-shadow:         0   0px                       0   $thickness $color,
//                           0   $gap + $thickness         0   $thickness $color,
//                           0   (2 * $gap + 2*$thickness) 0   $thickness $color;
//   }
//   &:hover span {
//     @if $experimental {
//       -webkit-box-shadow: 1px 0px                       1px $thickness $hover-color,
//                           1px ($gap + $thickness)       1px $thickness $hover-color,
//                           1px (2*$gap + 2*$thickness)   1px $thickness $hover-color;
//     }
//       box-shadow:         0   0px                       0   $thickness $hover-color,
//                           0   $gap + $thickness         0   $thickness $hover-color,
//                           0   (2 * $gap + 2*$thickness) 0   $thickness $hover-color;
//   }
// }

// //
// // DEFAULT CLASSES
// //
// @include exports("offcanvas") {
//   @if $include-html-off-canvas-classes {

//     .off-canvas-wrap { @include off-canvas-wrap; }
//     .inner-wrap { @include inner-wrap; }

//     .tab-bar { @include tab-bar-base; }

//     .left-small { @include tabbar-small-section($position: left); }
//     .right-small { @include tabbar-small-section($position: right); }

//     .tab-bar-section { @include tab-bar-section; }

//     // MENU BUTTON
//     // This is a little bonus. You don't need it for off canvas to work. Mixins to be written in the future.
//     .tab-bar .menu-icon {
//       text-indent: $tabbar-menu-icon-text-indent;
//       width: $tabbar-height;
//       height: $tabbar-height;
//       display: block;
//       line-height: $tabbar-menu-icon-line-height;
//       padding: $tabbar-menu-icon-padding;
//       color: $topbar-menu-link-color;
//       position: relative;

//       // this is the actual hamburger icon
//       @include hamburger();
//     }

//     .left-off-canvas-menu { @include off-canvas-menu($position: left); }
//     .right-off-canvas-menu { @include off-canvas-menu($position: right); }

//     ul.off-canvas-list { @include off-canvas-list; }


//     // ANIMATION CLASSES
//     // These classes are added with JS and trigger the actual animation.
//     .move-right {
//       > .inner-wrap {
//         @include translate3d($off-canvas-width,0,0);
//       }
//       .exit-off-canvas { @include back-link;}
//     }

//     .move-left {
//       > .inner-wrap {
//         @include translate3d(-($off-canvas-width),0,0);

//       }
//       .exit-off-canvas { @include back-link; }
//     }

//     // Opera 12.16 and IE9 - don't have 3d transforms
//     .csstransforms.no-csstransforms3d {
//       .left-off-canvas-menu { @include translate2d(-100%, 0); }
//       .right-off-canvas-menu { @include translate2d(100%, 0); }

//       .move-left > .inner-wrap { @include translate2d(-($off-canvas-width),0); }
//       .move-right > .inner-wrap { @include translate2d($off-canvas-width,0); }
//     }

//     // Older browsers
//     .no-csstransforms {
//       .left-off-canvas-menu { left: -($off-canvas-width); }
//       .right-off-canvas-menu { right: -($off-canvas-width); }

//       .move-left > .inner-wrap { right: $off-canvas-width; }
//       .move-right > .inner-wrap { left: $off-canvas-width; }
//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// // @variables
// //
// $include-html-orbit-classes: $include-html-classes !default;

// // We use these to control the caption styles
// $orbit-container-bg: none !default;
// $orbit-caption-bg: rgba(51,51,51, 0.8) !default;
// $orbit-caption-font-color: #fff !default;
// $orbit-caption-font-size: rem-calc(14) !default;
// $orbit-caption-position: "bottom" !default; // Supported values: "bottom", "under"
// $orbit-caption-padding: rem-calc(10 14) !default;
// $orbit-caption-height: auto !default;

// // We use these to control the left/right nav styles
// $orbit-nav-bg: none !default;
// $orbit-nav-bg-hover: rgba(0,0,0,0.3) !default;
// $orbit-nav-arrow-color: #fff !default;
// $orbit-nav-arrow-color-hover: #fff !default;

// // We use these to control the timer styles
// $orbit-timer-bg: rgba(255,255,255,0.3) !default;
// $orbit-timer-show-progress-bar: true !default;

// // We use these to control the bullet nav styles
// $orbit-bullet-nav-color: #ccc !default;
// $orbit-bullet-nav-color-active: #999 !default;
// $orbit-bullet-radius: rem-calc(9) !default;

// // We use these to controls the style of slide numbers
// $orbit-slide-number-bg: rgba(0,0,0,0) !default;
// $orbit-slide-number-font-color: #fff !default;
// $orbit-slide-number-padding: rem-calc(5) !default;

// // Graceful Loading Wrapper and preloader
// $wrapper-class: "slideshow-wrapper" !default;
// $preloader-class: "preloader" !default;

// @include exports("orbit") {
//   @if $include-html-orbit-classes {

//     @if $experimental {
//       @-webkit-keyframes rotate {
//         from { -webkit-transform: rotate(0deg); }
//         to { -webkit-transform: rotate(360deg); }
//       }
//       @-moz-keyframes rotate {
//         from { -moz-transform: rotate(0deg); }
//         to { -moz-transform: rotate(360deg); }
//       }
//       @-o-keyframes rotate {
//         from { -o-transform: rotate(0deg); }
//         to { -o-transform: rotate(360deg); }
//       }
//     }
//     @keyframes rotate {
//       from { transform: rotate(0deg); }
//       to { transform: rotate(360deg); }
//     }

//     /* Orbit Graceful Loading */
//     .#{$wrapper-class} {
//       position: relative;

//       ul {
//         // Prevent bullets showing before .orbit-container is loaded
//         list-style-type: none;
//         margin: 0;

//         // Hide all list items
//         li,
//         li .orbit-caption { display: none; }

//         // ...except for the first one
//         li:first-child { display: block; }
//       }

//       .orbit-container { background-color: transparent;

//         // Show images when .orbit-container is loaded
//         li { display: block;

//           .orbit-caption { display: block; }
//         }
//       }
//     }

//     // Orbit preloader
//     .#{$preloader-class} {
//       display: block;
//       width: 40px;
//       height: 40px;
//       position: absolute;
//       top: 50%;
//       left: 50%;
//       margin-top: -20px;
//       margin-left: -20px;
//       border: solid 3px;
//       border-color: #555 #fff;
//       @include radius(1000px);
//       @if $experimental {
//         -webkit-animation-name: rotate;
//         -webkit-animation-duration: 1.5s;
//         -webkit-animation-iteration-count: infinite;
//         -webkit-animation-timing-function: linear;
//         -moz-animation-name: rotate;
//         -moz-animation-duration: 1.5s;
//         -moz-animation-iteration-count: infinite;
//         -moz-animation-timing-function: linear;
//         -o-animation-name: rotate;
//         -o-animation-duration: 1.5s;
//         -o-animation-iteration-count: infinite;
//         -o-animation-timing-function: linear;
//       }
//       animation-name: rotate;
//       animation-duration: 1.5s;
//       animation-iteration-count: infinite;
//       animation-timing-function: linear;
//     }

//     .orbit-container {
//       overflow: hidden;
//       width: 100%;
//       position: relative;
//       background: $orbit-container-bg;

//       .orbit-slides-container {
//         list-style: none;
//         margin: 0;
//         padding: 0;
//         position: relative;

//         // Prevents images (and captions) from disappearing after first rotation on Chrome for Android
//         -webkit-transform: translateZ(0);

//         img { display: block; max-width: 100%; }

//         &.fade > * {
//           -webkit-transform: translate3d(0,0,0);
//           opacity: 0.01;
//           transition: opacity .25s ease-in-out;
//           -moz-transition: opacity .25s ease-in-out;
//           -webkit-transition: opacity .25s ease-in-out;
//           &.animate-in {
//             opacity: 1;
//             z-index: 20;
//             transition: opacity 500ms ease-in-out;
//             -moz-transition: opacity 500ms ease-in-out;
//             -webkit-transition: opacity 500ms ease-in-out;
//           }
//           &.animate-out {
//             opacity: 0.01;
//             z-index: 10;
//             transition: opacity 500ms ease-in-out;
//             -moz-transition: opacity 500ms ease-in-out;
//             -webkit-transition: opacity 500ms ease-in-out;
//           }
//         }
//         &.swipe-next > * {
//           -webkit-transform: translate3d(100%,0,0);
//           &.animate-in {
//             -webkit-transform:translate3d(0,0,0);
//             -moz-transform:translate3d(0,0,0);
//             -ms-transform:translate3d(0,0,0);
//             -o-transform:translate3d(0,0,0);
//             transform:translate3d(0,0,0);
//             -webkit-transition-duration:500ms;
//             -moz-transition-duration:500ms;
//             -o-transition-duration:500ms;
//             transition-duration:500ms;
//           }
//           &.animate-out {
//             -webkit-transform:translate3d(-100%,0,0);
//             -moz-transform:translate3d(-100%,0,0);
//             -ms-transform:translate3d(-100%,0,0);
//             -o-transform:translate3d(-100%,0,0);
//             transform:translate3d(-100%,0,0);
//             -webkit-transition-duration:500ms;
//             -moz-transition-duration:500ms;
//             -o-transition-duration:500ms;
//             transition-duration:500ms;
//           }
//         }

//         &.swipe-prev > * {
//           -webkit-transform:translate3d(-100%,0,0);
//           -moz-transform:translate3d(-100%,0,0);
//           -ms-transform:translate3d(-100%,0,0);
//           -o-transform:translate3d(-100%,0,0);
//           transform:translate3d(-100%,0,0);
//           &.animate-in {
//             -webkit-transform:translate3d(0,0,0);
//             -moz-transform:translate3d(0,0,0);
//             -ms-transform:translate3d(0,0,0);
//             -o-transform:translate3d(0,0,0);
//             transform:translate3d(0,0,0);
//             -webkit-transition-duration:500ms;
//             -moz-transition-duration:500ms;
//             -o-transition-duration:500ms;
//             transition-duration:500ms;
//           }
//           &.animate-out {
//             -webkit-transform:translate3d(100%,0,0);
//             -moz-transform:translate3d(100%,0,0);
//             -ms-transform:translate3d(100%,0,0);
//             -o-transform:translate3d(100%,0,0);
//             transform:translate3d(100%,0,0);
//             -webkit-transition-duration:500ms;
//             -moz-transition-duration:500ms;
//             -o-transition-duration:500ms;
//             transition-duration:500ms;
//           }
//         }

//         &>* {
//           position: absolute;
//           top: 0;
//           left: 0;
//           width: 100%;
//           -webkit-transform:translate3d(100%,0,0);
//           -moz-transform:translate3d(100%,0,0);
//           -ms-transform:translate3d(100%,0,0);
//           -o-transform:translate3d(100%,0,0);
//           transform:translate3d(100%,0,0);

//           &.active {
//             opacity: 1;
//             top: 0;
//             left: 0;
//             -webkit-transform:translate3d(0,0,0);
//             -moz-transform:translate3d(0,0,0);
//             -ms-transform:translate3d(0,0,0);
//             -o-transform:translate3d(0,0,0);
//             transform:translate3d(0,0,0);
//           }

//           .orbit-caption {
//             @if $orbit-caption-position == "bottom" {
//               position: absolute;
//               bottom: 0;
//             } @else if $orbit-caption-position == "under" {
//               position: relative;
//             }

//             background-color: $orbit-caption-bg;
//             color: $orbit-caption-font-color;
//             width: 100%;
//             padding: $orbit-caption-padding;
//             font-size: $orbit-caption-font-size;
//           }
//         }
//       }

//       .orbit-slide-number {
//         position: absolute;
//         top: 10px;
//         #{$default-float}: 10px;
//         font-size: 12px;
//         span { font-weight: 700; padding: $orbit-slide-number-padding;}
//         color: $orbit-slide-number-font-color;
//         background: $orbit-slide-number-bg;
//         z-index: 10;
//       }

//       .orbit-timer {
//         position: absolute;
//         top: 12px;
//         #{$opposite-direction}: 10px;
//         height: 6px;
//         width: 100px;
//         z-index: 10;
//         .orbit-progress {
//           @if $orbit-timer-show-progress-bar {
//             height: 3px;
//             background-color: $orbit-timer-bg;
//             display: block;
//             width: 0%;
//             position: relative;
//             right: 20px;
//             top: 5px;
//           }
//         }

//         // Play button
//         & > span {
//           display: none;
//           position: absolute;
//           top: 0px;
//           #{$opposite-direction}: 0;
//           width: 11px;
//           height: 14px;
//           border: solid 4px #fff;
//           border-top: none;
//           border-bottom: none;
//         }

//         // Pause button
//         &.paused {
//           & > span {
//             #{$opposite-direction}: -4px;
//             top: 0px;
//             width: 11px;
//             height: 14px;
//             border: inset 8px;
//             border-right-style: solid;
//             border-color: transparent transparent transparent #fff;
//             &.dark {
//               border-color: transparent transparent transparent #333;
//             }
//           }
//         }
//       }



//       &:hover .orbit-timer > span { display: block; }

//       // Let's get those controls to be right in the center on each side
//       .orbit-prev,
//       .orbit-next {
//         position: absolute;
//         top: 45%;
//         margin-top: -25px;
//         width: 36px;
//         height: 60px;
//         line-height: 50px;
//         color: white;
//         background-color: $orbit-nav-bg;
//         text-indent: -9999px !important;
//         z-index: 10;

//         &:hover {
//           background-color: $orbit-nav-bg-hover;
//         }

//         & > span {
//           position: absolute;
//           top: 50%;
//           margin-top: -10px;
//           display: block;
//           width: 0;
//           height: 0;
//           border: inset 10px;
//         }
//       }
//       .orbit-prev { #{$default-float}: 0;
//         & > span {
//           border-#{$opposite-direction}-style: solid;
//           border-color: transparent;
//           border-#{$opposite-direction}-color: $orbit-nav-arrow-color;
//         }
//         &:hover > span {
//           border-#{$opposite-direction}-color: $orbit-nav-arrow-color-hover;
//         }
//       }
//       .orbit-next { #{$opposite-direction}: 0;
//         & > span {
//           border-color: transparent;
//           border-#{$default-float}-style: solid;
//           border-#{$default-float}-color: $orbit-nav-arrow-color;
//           #{$default-float}: 50%;
//           margin-#{$default-float}: -4px;
//         }
//         &:hover > span {
//           border-#{$default-float}-color: $orbit-nav-arrow-color-hover;
//         }
//       }
//     }

//     .orbit-bullets-container { text-align: center; }
//     .orbit-bullets {
//       margin: 0 auto 30px auto;
//       overflow: hidden;
//       position: relative;
//       top: 10px;
//       float: none;
//       text-align: center;
//       display: block;

//       li {
//         display: inline-block;
//         width: $orbit-bullet-radius;
//         height: $orbit-bullet-radius;
//         background: $orbit-bullet-nav-color;
//         // float: $default-float;
//         float: none;
//         margin-#{$opposite-direction}: 6px;
//         @include radius(1000px);

//         &.active {
//           background: $orbit-bullet-nav-color-active;
//         }

//         &:last-child { margin-#{$opposite-direction}: 0; }
//       }
//     }

//     .touch {
//       .orbit-container {
//         .orbit-prev,
//         .orbit-next { display: none; }
//       }

//       .orbit-bullets { display: none; }
//     }


//     @media #{$medium-up} {

//       .touch {
//         .orbit-container {
//           .orbit-prev,
//           .orbit-next { display: inherit; }
//         }

//         .orbit-bullets { display: block; }
//       }

//     }

//     @media #{$small-only} {
//       .orbit-stack-on-small {
//         .orbit-slides-container {height: auto !important;}
//         .orbit-slides-container > * {
//           position: relative;
//           margin-left: 0% !important;
//         }
//         .orbit-timer,
//         .orbit-next,
//         .orbit-prev,
//         .orbit-bullets {display: none;}
//       }
//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-nav-classes: $include-html-classes !default;

// // We use these to control the pagination container
// $pagination-height: rem-calc(24) !default;
// $pagination-margin: rem-calc(-5) !default;

// // We use these to set the list-item properties
// $pagination-li-float: $default-float;
// $pagination-li-height: rem-calc(24) !default;
// $pagination-li-font-color: #222 !default;
// $pagination-li-font-size: rem-calc(14) !default;
// $pagination-li-margin: rem-calc(5) !default;

// // We use these for the pagination anchor links
// $pagination-link-pad: rem-calc(1 10 1) !default;
// $pagination-link-font-color: #999 !default;
// $pagination-link-active-bg: scale-color(#fff, $lightness: -10%) !default;

// // We use these for disabled anchor links
// $pagination-link-unavailable-cursor: default !default;
// $pagination-link-unavailable-font-color: #999 !default;
// $pagination-link-unavailable-bg-active: transparent !default;

// // We use these for currently selected anchor links
// $pagination-link-current-background: $primary-color !default;
// $pagination-link-current-font-color: #fff !default;
// $pagination-link-current-font-weight: bold !default;
// $pagination-link-current-cursor: default !default;
// $pagination-link-current-active-bg: $primary-color !default;

// // @mixins
// //
// // Style the pagination container. Currently only used when centering elements.
// // $center - Default: false, Options: true
// @mixin pagination-container($center:false) {
//   @if $center { text-align: center; }
// }

// // @mixins
// // Style unavailable list items
// @mixin pagination-unavailable-item {
//   a {
//     cursor: $pagination-link-unavailable-cursor;
//     color: $pagination-link-unavailable-font-color;
//   }
//   &:hover a,
//   & a:focus { background: $pagination-link-unavailable-bg-active; }
// }
// // @mixins
// // Style the current list item. Do not assume that the current item has
// // an anchor <a> element.
// // $has-anchor - Default: true, Options: false
// @mixin pagination-current-item($has-anchor: true) {
//   @if $has-anchor {
//     a {
//       background: $pagination-link-current-background;
//       color: $pagination-link-current-font-color;
//       font-weight: $pagination-link-current-font-weight;
//       cursor: $pagination-link-current-cursor;

//       &:hover,
//       &:focus { background: $pagination-link-current-active-bg; }
//     }
//   } @else {
//     height: auto;
//     padding: $pagination-link-pad;
//     background: $pagination-link-current-background;
//     color: $pagination-link-current-font-color;
//     font-weight: $pagination-link-current-font-weight;
//     cursor: $pagination-link-current-cursor;
//     @include radius;

//     &:hover,
//     &:focus { background: $pagination-link-current-active-bg; }
//   }
// }

// // @mixins
// //
// // We use this mixin to set the properties for the creating Foundation pagination
// // $center - Left or center align the li elements. Default: false
// // $base-style - Sets base styles for pagination. Default: true, Options: false
// // $use-default-classes - Makes unavailable & current classes available for use. Default: true
// @mixin pagination($center:false, $base-style:true, $use-default-classes:true) {

//   @if $base-style {
//     display: block;
//     height: $pagination-height;
//     margin-#{$default-float}: $pagination-margin;

//     li {
//       height: $pagination-li-height;
//       color: $pagination-li-font-color;
//       font-size: $pagination-li-font-size;
//       margin-#{$default-float}: $pagination-li-margin;

//       a {
//         display: block;
//         padding: $pagination-link-pad;
//         color: $pagination-link-font-color;
//         @include radius;
//       }

//       &:hover a,
//       a:focus { background: $pagination-link-active-bg; }

//       @if $use-default-classes {
//         &.unavailable { @include pagination-unavailable-item(); }
//         &.current { @include pagination-current-item(); }
//       }
//     }
//   }

//   // Left or center align the li elements
//   li {
//     @if $center {
//       float: none;
//       display: inline-block;
//     } @else {
//       float: $pagination-li-float;
//       display: block;
//     }
//   }
// }

// @include exports("pagination") {
//   @if $include-html-nav-classes {
//     ul.pagination {
//       @include pagination;
//     }

//     /* Pagination centred wrapper */
//     .pagination-centered {
//       @include pagination-container(true);

//       ul.pagination {
//         @include pagination(true, false);
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-panel-classes: $include-html-classes !default;

// // We use these to control the background and border styles
// $panel-bg: scale-color(#fff, $lightness: -5%) !default;
// $panel-border-style: solid !default;
// $panel-border-size: 1px !default;

// // We use this % to control how much we darken things on hover
// $panel-function-factor: -11% !default;
// $panel-border-color: scale-color($panel-bg, $lightness: $panel-function-factor) !default;

// // We use these to set default inner padding and bottom margin
// $panel-margin-bottom: rem-calc(20) !default;
// $panel-padding: rem-calc(20) !default;

// // We use these to set default font colors
// $panel-font-color: #333 !default;
// $panel-font-color-alt: #fff !default;

// $panel-header-adjust: true !default;
// $callout-panel-link-color: $primary-color !default;
// //
// // @mixins
// //
// // We use this mixin to create panels.
// // $bg - Sets the panel background color. Default: $panel-pg || scale-color(#fff, $lightness: -5%) !default
// // $padding - Sets the panel padding amount. Default: $panel-padding || rem-calc(20)
// // $adjust - Sets the font color based on the darkness of the bg & resets header line-heights for panels. Default: $panel-header-adjust || true
// @mixin panel($bg:$panel-bg, $padding:$panel-padding, $adjust:$panel-header-adjust) {

//   @if $bg {
//     $bg-lightness: lightness($bg);

//     border-style: $panel-border-style;
//     border-width: $panel-border-size;
//     border-color: scale-color($bg, $lightness: $panel-function-factor);
//     margin-bottom: $panel-margin-bottom;
//     padding: $padding;

//     background: $bg;

//     // Respect the padding, fool.
//     &>:first-child { margin-top: 0; }
//     &>:last-child { margin-bottom: 0; }

//     @if $adjust {
//       // We set the font color based on the darkness of the bg.
//       @if $bg-lightness >= 50% and $bg == blue { h1,h2,h3,h4,h5,h6,p { color: $panel-font-color-alt; } }
//       @else if $bg-lightness >= 50%            { h1,h2,h3,h4,h5,h6,p { color: $panel-font-color; } }
//       @else                                    { h1,h2,h3,h4,h5,h6,p { color: $panel-font-color-alt; } }

//       // reset header line-heights for panels
//       h1,h2,h3,h4,h5,h6 {
//         line-height: 1; margin-bottom: rem-calc(20) / 2;
//         &.subheader { line-height: 1.4; }
//       }
//     }
//   }
// }

// @include exports("panel") {
//   @if $include-html-panel-classes {

//     /* Panels */
//     .panel { @include panel;

//       &.callout {
//         @include panel(scale-color($primary-color, $lightness: 94%));
//         a:not(.button) {
//           color: $callout-panel-link-color;
//         }
//       }

//       &.radius {
//         @include panel($bg:false);
//         @include radius;
//       }

//     }

//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-pricing-classes: $include-html-classes !default;

// // We use this to control the border color
// $price-table-border: solid 1px #ddd !default;

// // We use this to control the bottom margin of the pricing table
// $price-table-margin-bottom: rem-calc(20) !default;

// // We use these to control the title styles
// $price-title-bg: #333 !default;
// $price-title-padding: rem-calc(15 20) !default;
// $price-title-align: center !default;
// $price-title-color: #eee !default;
// $price-title-weight: normal !default;
// $price-title-size: rem-calc(16) !default;
// $price-title-font-family: $body-font-family !default;

// // We use these to control the price styles
// $price-money-bg: #f6f6f6 !default;
// $price-money-padding: rem-calc(15 20) !default;
// $price-money-align: center !default;
// $price-money-color: #333 !default;
// $price-money-weight: normal !default;
// $price-money-size: rem-calc(32) !default;
// $price-money-font-family: $body-font-family !default;


// // We use these to control the description styles
// $price-bg: #fff !default;
// $price-desc-color: #777 !default;
// $price-desc-padding: rem-calc(15) !default;
// $price-desc-align: center !default;
// $price-desc-font-size: rem-calc(12) !default;
// $price-desc-weight: normal !default;
// $price-desc-line-height: 1.4 !default;
// $price-desc-bottom-border: dotted 1px #ddd !default;

// // We use these to control the list item styles
// $price-item-color: #333 !default;
// $price-item-padding: rem-calc(15) !default;
// $price-item-align: center !default;
// $price-item-font-size: rem-calc(14) !default;
// $price-item-weight: normal !default;
// $price-item-bottom-border: dotted 1px #ddd !default;

// // We use these to control the CTA area styles
// $price-cta-bg: #fff !default;
// $price-cta-align: center !default;
// $price-cta-padding: rem-calc(20 20 0) !default;

// // @mixins
// //
// // We use this to create the container element for the pricing tables
// @mixin pricing-table-container {
//   border: $price-table-border;
//   margin-#{$default-float}: 0;
//   margin-bottom: $price-table-margin-bottom;

//   & * {
//     list-style: none;
//     line-height: 1;
//   }
// }
// // @mixins
// //
// // We use this mixin to create the pricing table title styles
// @mixin pricing-table-title {
//   background-color: $price-title-bg;
//   padding: $price-title-padding;
//   text-align: $price-title-align;
//   color: $price-title-color;
//   font-weight: $price-title-weight;
//   font-size: $price-title-size;
//   font-family: $price-title-font-family;
// }

// // @mixins
// //
// // We use this mixin to control the pricing table price styles
// @mixin pricing-table-price {
//   background-color: $price-money-bg;
//   padding: $price-money-padding;
//   text-align: $price-money-align;
//   color: $price-money-color;
//   font-weight: $price-money-weight;
//   font-size: $price-money-size;
//   font-family: $price-money-font-family;
// }

// // @mixins
// //
// // We use this mixin to create the description styles for the pricing table
// @mixin pricing-table-description {
//   background-color: $price-bg;
//   padding: $price-desc-padding;
//   text-align: $price-desc-align;
//   color: $price-desc-color;
//   font-size: $price-desc-font-size;
//   font-weight: $price-desc-weight;
//   line-height: $price-desc-line-height;
//   border-bottom: $price-desc-bottom-border;
// }

// // @mixins
// //
// // We use this mixin to style the bullet items in the pricing table
// @mixin pricing-table-bullet {
//   background-color: $price-bg;
//   padding: $price-item-padding;
//   text-align: $price-item-align;
//   color: $price-item-color;
//   font-size: $price-item-font-size;
//   font-weight: $price-item-weight;
//   border-bottom: $price-item-bottom-border;
// }

// // @mixins
// //
// // We use this mixin to style the CTA area of the pricing tables
// @mixin pricing-table-cta {
//   background-color: $price-cta-bg;
//   text-align: $price-cta-align;
//   padding: $price-cta-padding;
// }

// @include exports("pricing-table") {
//   @if $include-html-pricing-classes {

//     /* Pricing Tables */
//     .pricing-table {
//       @include pricing-table-container;

//       .title { @include pricing-table-title; }
//       .price { @include pricing-table-price; }
//       .description { @include pricing-table-description; }
//       .bullet-item { @include pricing-table-bullet; }
//       .cta-button { @include pricing-table-cta; }
//     }

//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //
// $include-html-media-classes: $include-html-classes !default;

// // We use this to set the progress bar height
// $progress-bar-height: rem-calc(25) !default;
// $progress-bar-color: #f6f6f6 !default;

// // We use these to control the border styles
// $progress-bar-border-color: scale-color(#fff, $lightness: 20%) !default;
// $progress-bar-border-size: 1px !default;
// $progress-bar-border-style: solid !default;
// $progress-bar-border-radius: $global-radius !default;

// // We use these to control the margin & padding
// $progress-bar-pad: rem-calc(2) !default;
// $progress-bar-margin-bottom: rem-calc(10) !default;

// // We use these to set the meter colors
// $progress-meter-color: $primary-color !default;
// $progress-meter-secondary-color: $secondary-color !default;
// $progress-meter-success-color: $success-color !default;
// $progress-meter-alert-color: $alert-color !default;

// // @mixins
// //
// // We use this to set up the progress bar container
// @mixin progress-container {
//   background-color: $progress-bar-color;
//   height: $progress-bar-height;
//   border: $progress-bar-border-size $progress-bar-border-style $progress-bar-border-color;
//   padding: $progress-bar-pad;
//   margin-bottom: $progress-bar-margin-bottom;
// }

// // @mixins
// //
// // $bg - Default: $progress-meter-color || $primary-color
// @mixin progress-meter($bg:$progress-meter-color) {
//   background: $bg;
//   height: 100%;
//   display: block;
// }


// @include exports("progress-bar") {
//   @if $include-html-media-classes {

//     /* Progress Bar */
//     .progress {
//       @include progress-container;

//       // Meter
//       .meter {
//         @include progress-meter;
//       }
//       &.secondary .meter { @include progress-meter($bg:$progress-meter-secondary-color); }
//       &.success .meter { @include progress-meter($bg:$progress-meter-success-color); }
//       &.alert .meter { @include progress-meter($bg:$progress-meter-alert-color); }

//       &.radius { @include radius($global-radius);
//         .meter { @include radius($global-radius - 1); }
//       }

//       &.round { @include radius(1000px);
//         .meter { @include radius(999px); }
//       }

//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @name _range-slider.scss
// // @dependencies _global.scss
// //

// //
// // @variables
// //

// $include-html-range-slider-classes: $include-html-classes !default;

// // These variabels define the slider bar styles
// $range-slider-bar-width: 100% !default;
// $range-slider-bar-height: rem-calc(16) !default;

// $range-slider-bar-border-width: 1px !default;
// $range-slider-bar-border-style: solid !default;
// $range-slider-bar-border-color: #ddd !default;
// $range-slider-radius: $global-radius !default;
// $range-slider-round: $global-rounded !default;
// $range-slider-bar-bg-color: #fafafa !default;

// // Vertical bar styles
// $range-slider-vertical-bar-width: rem-calc(16) !default;
// $range-slider-vertical-bar-height: rem-calc(200) !default;

// // These variabels define the slider handle styles
// $range-slider-handle-width: rem-calc(32) !default;
// $range-slider-handle-height: rem-calc(22) !default;
// $range-slider-handle-position-top: rem-calc(-5) !default;
// $range-slider-handle-bg-color: $primary-color !default;
// $range-slider-handle-border-width: 1px !default;
// $range-slider-handle-border-style: solid !default;
// $range-slider-handle-border-color: none !default;
// $range-slider-handle-radius: $global-radius !default;
// $range-slider-handle-round: $global-rounded !default;
// $range-slider-handle-bg-hover-color: scale-color($primary-color, $lightness: -12%) !default;
// $range-slider-handle-cursor: pointer !default;


// //
// // @mixins
// //

// @mixin range-slider-bar-base($vertical: false) {
//   display: block;
//   position: relative;
//   width: $range-slider-bar-width;
//   height: $range-slider-bar-height;
//   border: $range-slider-bar-border-width $range-slider-bar-border-style $range-slider-bar-border-color;
//   margin: rem-calc(20 0);
//   touch-action: none;
//   -ms-touch-action: none;
//   @if $vertical == true {
//     display: inline-block;
//     width: $range-slider-vertical-bar-width;
//     height: $range-slider-vertical-bar-height;
//   }
// }
// @mixin range-slider-bar-style(
//   $bg: true,
//   $radius: false,
//   $round: false) {
//     @if $bg == true { background: $range-slider-bar-bg-color; }
//     @if $radius == true { @include radius($range-slider-radius); }
//     @if $round == true { @include radius($range-slider-round); }
//   }

// @mixin range-slider-bar(
//   $bg: $range-slider-bar-bg-color,
//   $radius:false) {
//   @include range-slider-bar-base;
//   @include range-slider-bar-style;
// }

// @mixin range-slider-handle-base() {
//   display: inline-block;
//   position: absolute;
//   z-index: 1;
//   top: $range-slider-handle-position-top;
//   width: $range-slider-handle-width;
//   height: $range-slider-handle-height;
//   border: $range-slider-handle-border-width $range-slider-handle-border-style $range-slider-handle-border-color;
//   cursor: $range-slider-handle-cursor;
// }
// @mixin range-slider-handle-style(
//   $bg: true,
//   $radius: false,
//   $round: false) {
//   @if $bg == true { background: $range-slider-handle-bg-color; }
//   @if $radius == true { @include radius($range-slider-radius); }
//   @if $round == true { @include radius($range-slider-round); }
//   &:hover {
//     background: $range-slider-handle-bg-hover-color;
//   }
// }
// @mixin range-slider-handle() {
//   @include range-slider-handle-base;
//   @include range-slider-handle-style;
// }

// // CSS Generation
// @include exports("range-slider-bar") {
//   @if $include-html-range-slider-classes {
//     .range-slider {
//       @include range-slider-bar-base;
//       @include range-slider-bar-style($bg:true, $radius:false);
//       &.vertical-range {
//         @include range-slider-bar-base($vertical: true);
//         .range-slider-handle {
//           margin-top: 0;
//           margin-#{$default-float}: -($range-slider-handle-width / 4);
//           position: absolute;
//           bottom: -($range-slider-vertical-bar-height - $range-slider-handle-width);
//         }
//         .range-slider-active-segment {
//           width: $range-slider-bar-height - rem-calc((strip-unit($range-slider-bar-border-width) * 2));
//           height: auto;
//           bottom: 0;
//         }
//       }
//       &.radius {
//         @include range-slider-bar-style($radius:true);
//         .range-slider-handle { @include range-slider-handle-style($radius: true); }
//       }
//       &.round {
//         @include range-slider-bar-style($round:true);
//         .range-slider-handle { @include range-slider-handle-style($round: true); }
//       }
//     }
//     .range-slider-active-segment {
//       display: inline-block;
//       position: absolute;
//       height: $range-slider-bar-height - rem-calc((strip-unit($range-slider-bar-border-width) * 2));
//       background: scale-color($secondary-color, $lightness: -1%);
//     }
//     .range-slider-handle {
//       @include range-slider-handle-base;
//       @include range-slider-handle-style($bg:true, $radius: false);
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @name _reveal.scss
// // @dependencies _global.scss
// //

// $include-html-reveal-classes: $include-html-classes !default;

// // We use these to control the style of the reveal overlay.
// $reveal-overlay-bg: rgba(#000, .45) !default;
// $reveal-overlay-bg-old: #000 !default;

// // We use these to control the style of the modal itself.
// $reveal-modal-bg: #fff !default;
$reveal-position-top: rem-calc(1) !default;
// $reveal-default-width: 80% !default;
// $reveal-modal-padding: rem-calc(20) !default;
// $reveal-box-shadow: 0 0 10px rgba(#000,.4) !default;

// // We use these to style the reveal close button
// $reveal-close-font-size: rem-calc(40) !default;
// $reveal-close-top: rem-calc(8) !default;
// $reveal-close-side: rem-calc(11) !default;
// $reveal-close-color: #aaa !default;
// $reveal-close-weight: bold !default;

// // We use these to control the modal border
// $reveal-border-style: solid !default;
// $reveal-border-width: 1px !default;
// $reveal-border-color: #666 !default;

// $reveal-modal-class: "reveal-modal" !default;
// $close-reveal-modal-class: "close-reveal-modal" !default;

// //
// // @mixins
// //

// // We use this to create the reveal background overlay styles
// @mixin reveal-bg {
//   position: fixed;
//   height: 100%;
//   width: 100%;
//   background: $reveal-overlay-bg-old;
//   background: $reveal-overlay-bg;
//   z-index: 99;
//   display: none;
//   top: 0;
//   #{$default-float}: 0;
// }

// // We use this mixin to create the structure of a reveal modal
// //
// // $base-style - Provides reveal base styles, can be set to false to override. Default: true, Options: false
// // $width - Sets reveal width Default: $reveal-default-width || 80%
// //
// @mixin reveal-modal-base(
//   $base-style:true,
//   $width:$reveal-default-width) {
//   @if $base-style {
//     visibility: hidden;
//     display: none;
//     position: absolute;
//     z-index: 100;
//     width: 100vw;
//     top:0;
//     #{$default-float}: 0;
//     @media #{$small-only} {
//       height: 100vh;
//       min-height:100vh;
//     }
//     @media #{$medium-up} {
//       #{$default-float}: 50%;
//     }

//     // Make sure rows don't have a min-width on them
//     .column,
//     .columns { min-width: 0; }

//     // Get rid of margin from first and last element inside modal
//     & > :first-child { margin-top: 0; }
//     & > :last-child { margin-bottom: 0; }
//   }

//   @if $width {
//     @media #{$medium-up} {
//       margin-#{$default-float}: -($width / 2);
//       width: $width;
//     }
//   }
// }

// // We use this to style the reveal modal defaults
// //
// // $bg - Sets background color of reveal modal. Default: $reveal-modal-bg || #fff
// // $padding - Padding to apply to reveal modal. Default: $reveal-modal-padding.
// // $border - Choose whether reveal uses a border. Default: true, Options: false
// // $border-style - Set reveal border style. Default: $reveal-border-style || solid
// // $border-width - Width of border (i.e. 1px). Default: $reveal-border-width.
// // $border-color - Color of border. Default: $reveal-border-color.
// // $box-shadow - Choose whether or not to include the default box-shadow. Default: true, Options: false
// // $top-offset - Default: $reveal-position-top || 50px
// @mixin reveal-modal-style(
//   $bg:$reveal-modal-bg,
//   $padding:$reveal-modal-padding,
//   $border:true,
//   $border-style:$reveal-border-style,
//   $border-width:$reveal-border-width,
//   $border-color:$reveal-border-color,
//   $box-shadow:true,
//   $top-offset:$reveal-position-top) {

//   @if $bg { background-color: $bg; }
//   @if $padding { padding: $padding; }

//   @if $border { border: $border-style $border-width $border-color; }

//   // We can choose whether or not to include the default box-shadow.
//   @if $box-shadow {
//     @if $experimental {
//       -webkit-box-shadow: $reveal-box-shadow;
//     }
//     box-shadow: $reveal-box-shadow;
//   }

//   @if $top-offset {
//     @media #{$medium-up} {
//       top: $top-offset;
//     }
//   }
// }

// // We use this to create a close button for the reveal modal
// //
// // $color - Default: $reveal-close-color || #aaa
// @mixin reveal-close($color:$reveal-close-color) {
//   font-size: $reveal-close-font-size;
//   line-height: 1;
//   position: absolute;
//   top: $reveal-close-top;
//   #{$opposite-direction}: $reveal-close-side;
//   color: $color;
//   font-weight: $reveal-close-weight;
//   cursor: $cursor-pointer-value;
// }

// @include exports("reveal") {
//   @if $include-html-reveal-classes {

//     // Reveal Modals
//     .reveal-modal-bg { @include reveal-bg; }

//     dialog, .#{$reveal-modal-class} {
//       @include reveal-modal-base;
//       @include reveal-modal-style;

//       .#{$close-reveal-modal-class} { @include reveal-close; }
//     }

//     dialog[open] {
// 	display:block;
// 	visibility: visible;
//     }

//     @media #{$medium-up} {

//       dialog, .#{$reveal-modal-class} {
//         @include reveal-modal-style(false, $reveal-modal-padding * 1.5, false, $box-shadow: false, $top-offset: $reveal-position-top);

//         &.tiny  { @include reveal-modal-base(false, 30%); }
//         &.small { @include reveal-modal-base(false, 40%); }
//         &.medium  { @include reveal-modal-base(false, 60%); }
//         &.large { @include reveal-modal-base(false, 70%); }
//         &.xlarge { @include reveal-modal-base(false, 95%); }
//       }

//       dialog, .#{$reveal-modal-class} {
//         &.full {
//           @include reveal-modal-base(false, 100vw);
//           top:0;
//           left:0;
//           height: 100vh;
//           min-height:100vh;
//           margin-left: 0 !important;
//         }
//       }
//     }

//     // Reveal Print Styles
//     @media print {
//       dialog, .#{$reveal-modal-class} {background: #fff !important;}
//     }
//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @variables
// //

// $include-html-nav-classes: $include-html-classes !default;

// // We use this to control padding.
// $side-nav-padding: rem-calc(14 0) !default;

// // We use these to control list styles.
// $side-nav-list-type: none !default;
// $side-nav-list-position: inside !default;
// $side-nav-list-margin: rem-calc(0 0 7 0) !default;

// // We use these to control link styles.
// $side-nav-link-color: $primary-color !default;
// $side-nav-link-color-active: scale-color($side-nav-link-color, $lightness: 30%) !default;
// $side-nav-link-color-hover: scale-color($side-nav-link-color, $lightness: 30%) !default;
// $side-nav-font-size: rem-calc(14) !default;
// $side-nav-font-weight: normal !default;
// $side-nav-font-weight-active: $side-nav-font-weight !default;
// $side-nav-font-family: $body-font-family !default;
// $side-nav-font-family-active: $side-nav-font-family !default;



// // We use these to control border styles
// $side-nav-divider-size: 1px !default;
// $side-nav-divider-style: solid !default;
// $side-nav-divider-color: scale-color(#fff, $lightness: 10%) !default;


// //
// // @mixins
// //


// // We use this to style the side-nav
// //
// // $divider-color - Border color of divider. Default: $side-nav-divider-color.
// // $font-size - Font size of nav items. Default: $side-nav-font-size.
// // $link-color - Color of navigation links. Default: $side-nav-link-color.
// // $link-color-hover - Color of navigation links when hovered. Default: $side-nav-link-color-hover.
// @mixin side-nav(
//   $divider-color:$side-nav-divider-color,
//   $font-size:$side-nav-font-size,
//   $link-color:$side-nav-link-color,
//   $link-color-hover:$side-nav-link-color-hover) {
//   display: block;
//   margin: 0;
//   padding: $side-nav-padding;
//   list-style-type: $side-nav-list-type;
//   list-style-position: $side-nav-list-position;
//   font-family: $side-nav-font-family;

//   li {
//     margin: $side-nav-list-margin;
//     font-size: $font-size;

//     a:not(.button) {
//       display: block;
//       color: $link-color;
//       &:hover,
//       &:focus { color: $link-color-hover; }
//     }

//     &.active > a:first-child:not(.button) {
//       color: $side-nav-link-color-active;
//       font-weight: $side-nav-font-weight-active;
//       font-family: $side-nav-font-family-active;
//     }

//     &.divider {
//       border-top: $side-nav-divider-size $side-nav-divider-style;
//       height: 0;
//       padding: 0;
//       list-style: none;
//       border-top-color: $divider-color;
//     }
//   }
// }

// @include exports("side-nav") {
//   @if $include-html-nav-classes {
//     .side-nav { @include side-nav; }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "buttons";
// @import "dropdown-buttons";

// //
// // @name _split-buttons.scss
// // @dependencies _buttons.scss, _global.scss
// //

// //
// // @variables
// //

// $include-html-button-classes: $include-html-classes !default;

// // We use these to control different shared styles for Split Buttons
// $split-button-function-factor: 10% !default;
// $split-button-pip-color: #fff !default;
// $split-button-pip-color-alt: #333 !default;
// $split-button-active-bg-tint: rgba(0,0,0,0.1) !default;

// // We use these to control tiny split buttons
// $split-button-padding-tny: $button-pip-tny * 10 !default;
// $split-button-span-width-tny: $button-pip-tny * 6 !default;
// $split-button-pip-size-tny: $button-pip-tny !default;
// $split-button-pip-top-tny: $button-pip-tny * 2 !default;
// $split-button-pip-default-float-tny: rem-calc(-6) !default;

// // We use these to control small split buttons
// $split-button-padding-sml: $button-pip-sml * 10 !default;
// $split-button-span-width-sml: $button-pip-sml * 6 !default;
// $split-button-pip-size-sml: $button-pip-sml !default;
// $split-button-pip-top-sml: $button-pip-sml * 1.5 !default;
// $split-button-pip-default-float-sml: rem-calc(-6) !default;

// // We use these to control medium split buttons
// $split-button-padding-med: $button-pip-med * 9 !default;
// $split-button-span-width-med: $button-pip-med * 5.5 !default;
// $split-button-pip-size-med: $button-pip-med - rem-calc(3) !default;
// $split-button-pip-top-med: $button-pip-med * 1.5 !default;
// $split-button-pip-default-float-med: rem-calc(-6) !default;

// // We use these to control large split buttons
// $split-button-padding-lrg: $button-pip-lrg * 8 !default;
// $split-button-span-width-lrg: $button-pip-lrg * 5 !default;
// $split-button-pip-size-lrg: $button-pip-lrg - rem-calc(6) !default;
// $split-button-pip-top-lrg: $button-pip-lrg + rem-calc(5) !default;
// $split-button-pip-default-float-lrg: rem-calc(-6) !default;


// //
// // @mixins
// //

// // We use this mixin to create split buttons that build upon the button mixins
// //
// // $padding - Type of padding to apply. Default: medium. Options: tiny, small, medium, large.
// // $pip-color - Color of the triangle. Default: $split-button-pip-color.
// // $span-border - Border color of button divider. Default: $primary-color.
// // $base-style - Apply base style to split button. Default: true.
// @mixin split-button(
//   $padding:medium,
//   $pip-color:$split-button-pip-color,
//   $span-border:$primary-color,
//   $base-style:true) {

//   // With this, we can control whether or not the base styles come through.
//   @if $base-style {
//     position: relative;

//     // Styling for the split arrow clickable area
//     span {
//       display: block;
//       height: 100%;
//       position: absolute;
//       #{$opposite-direction}: 0;
//       top: 0;
//       border-#{$default-float}: solid 1px;

//       // Building the triangle pip indicator
//       &:before {
//         position: absolute;
//         content: "";
//         width: 0;
//         height: 0;
//         display: block;
//         border-style: inset;
//         top: 50%;

//         #{$default-float}: 50%;
//       }

//       &:active { background-color: $split-button-active-bg-tint; }
//     }
//   }

//   // Control the border color for the span area of the split button
//   @if $span-border {
//     span {
//       border-#{$default-float}-color: rgba(255,255,255,0.5);
//     }
//   }

//   // Style of the button and clickable area for tiny sizes
//   @if $padding == tiny {
//     padding-#{$opposite-direction}: $split-button-padding-tny;

//     span { width: $split-button-span-width-tny;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-tny;
//         top: 48%;
//         margin-#{$default-float}: $split-button-pip-default-float-tny;
//       }
//     }
//   }

//   // Style of the button and clickable area for small sizes
//   @else if $padding == small {
//     padding-#{$opposite-direction}: $split-button-padding-sml;

//     span { width: $split-button-span-width-sml;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-sml;
//         top: 48%;
//         margin-#{$default-float}: $split-button-pip-default-float-sml;
//       }
//     }
//   }

//   // Style of the button and clickable area for default (medium) sizes
//   @else if $padding == medium {
//     padding-#{$opposite-direction}: $split-button-padding-med;

//     span { width: $split-button-span-width-med;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-med;
//         top: 48%;
//         margin-#{$default-float}: $split-button-pip-default-float-med;
//       }
//     }
//   }

//   // Style of the button and clickable area for large sizes
//   @else if $padding == large {
//     padding-#{$opposite-direction}: $split-button-padding-lrg;

//     span { width: $split-button-span-width-lrg;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-lrg;
//         top: 48%;
//         margin-#{$default-float}: $split-button-pip-default-float-lrg;
//       }
//     }
//   }

//   // Control the color of the triangle pip
//   @if $pip-color {
//     span:before { border-color: $pip-color transparent transparent transparent; }
//   }
// }

// @include exports("split-button") {
//   @if $include-html-button-classes {

//     .split.button { @include split-button;

//       &.secondary { @include split-button(false, $split-button-pip-color, $secondary-color, false); }
//       &.alert { @include split-button(false, false, $alert-color, false); }
//       &.success { @include split-button(false, false, $success-color, false); }

//       &.tiny { @include split-button(tiny, false, false, false); }
//       &.small { @include split-button(small, false, false, false); }
//       &.large { @include split-button(large, false, false, false); }
//       &.expand { padding-left: 2rem; }

//       &.secondary { @include split-button(false, $split-button-pip-color-alt, false, false); }

//       &.radius span { @include side-radius($opposite-direction, $global-radius); }
//       &.round span { @include side-radius($opposite-direction, 1000px); }
//     }

//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @name _sub-nav.scss
// // @dependencies _global.scss
// //

// //
// // @variables
// //

// $include-html-nav-classes: $include-html-classes !default;

// // We use these to control margin and padding
// $sub-nav-list-margin: rem-calc(-4 0 18) !default;
// $sub-nav-list-padding-top: rem-calc(4) !default;

// // We use this to control the definition
// $sub-nav-font-family: $body-font-family !default;
// $sub-nav-font-size: rem-calc(14) !default;
// $sub-nav-font-color: #999 !default;
// $sub-nav-font-weight: normal !default;
// $sub-nav-text-decoration: none !default;
// $sub-nav-padding: rem-calc(3 16) !default;
// $sub-nav-border-radius: 3px !default;
// $sub-nav-font-color-hover: scale-color($sub-nav-font-color, $lightness: -25%) !default;


// // We use these to control the active item styles

// $sub-nav-active-font-weight: normal !default;
// $sub-nav-active-bg: $primary-color !default;
// $sub-nav-active-bg-hover: scale-color($sub-nav-active-bg, $lightness: -14%) !default;
// $sub-nav-active-color: #fff !default;
// $sub-nav-active-padding: $sub-nav-padding !default;
// $sub-nav-active-cursor: default !default;

// $sub-nav-item-divider: "" !default;
// $sub-nav-item-divider-margin: rem-calc(12) !default;

// //
// // @mixins
// //


// // Create a sub-nav item
// //
// // $font-color - Font color. Default: $sub-nav-font-color.
// // $font-size - Font size. Default: $sub-nav-font-size.
// // $active-bg - Background of active nav item. Default: $sub-nav-active-bg.
// // $active-bg-hover - Background of active nav item, when hovered. Default: $sub-nav-active-bg-hover.
// @mixin sub-nav(
//   $font-color: $sub-nav-font-color,
//   $font-size: $sub-nav-font-size,
//   $active-bg: $sub-nav-active-bg,
//   $active-bg-hover: $sub-nav-active-bg-hover) {
//   display: block;
//   width: auto;
//   overflow: hidden;
//   margin: $sub-nav-list-margin;
//   padding-top: $sub-nav-list-padding-top;
//   margin-#{$opposite-direction}: 0;
//   margin-#{$default-float}: rem-calc(-12);

//   dt {
//     text-transform: uppercase;
//   }

//   dt,
//   dd,
//   li {
//     float: $default-float;
//     display: inline;
//     margin-#{$default-float}: rem-calc(16);
//     margin-bottom: rem-calc(10);
//     font-family: $sub-nav-font-family;
//     font-weight: $sub-nav-font-weight;
//     font-size: $font-size;
//     color: $font-color;

//     a {
//       text-decoration: $sub-nav-text-decoration;
//       color: $sub-nav-font-color;
//       padding: $sub-nav-padding;
//       &:hover {
//         color: $sub-nav-font-color-hover;
//       }
//     }

//     &.active a {
//       @include radius($sub-nav-border-radius);
//       font-weight: $sub-nav-active-font-weight;
//       background: $active-bg;
//       padding: $sub-nav-active-padding;
//       cursor: $sub-nav-active-cursor;
//       color: $sub-nav-active-color;
//       &:hover {
//         background: $active-bg-hover;
//       }
//     }
//     @if $sub-nav-item-divider != "" {
//       margin-#{$default-float}: 0;

//       &:before {
//         content: "#{$sub-nav-item-divider}";
//         margin: 0 $sub-nav-item-divider-margin;
//       }

//       &:first-child:before {
//         content: "";
//         margin: 0;
//       }
//     }
//   }
// }

// @include exports("sub-nav") {
//   @if $include-html-nav-classes {
//     .sub-nav { @include sub-nav; }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @name
// // @dependencies _global.scss
// //

// //
// // @variables
// //

// // NOTE: Switches have been deprecated in Foundation 5 and will be removed in the future.

// $include-html-form-classes: $include-html-classes !default;

// // Controlling border styles and background colors for the switch container
// $switch-border-color: scale-color(#fff, $lightness: -20%) !default;
// $switch-border-style: solid !default;
// $switch-border-width: 1px !default;
// $switch-bg: #fff !default;

// // We use these to control the switch heights for our default classes
// $switch-height-tny: 22px !default;
// $switch-height-sml: 28px !default;
// $switch-height-med: 36px !default;
// $switch-height-lrg: 44px !default;
// $switch-bottom-margin: rem-calc(20) !default;

// // We use these to control default font sizes for our classes.
// $switch-font-size-tny: 11px !default;
// $switch-font-size-sml: 12px !default;
// $switch-font-size-med: 14px !default;
// $switch-font-size-lrg: 17px !default;
// $switch-label-side-padding: 6px !default;

// // We use these to style the switch-paddle
// $switch-paddle-bg: #fff !default;
// $switch-paddle-fade-to-color: scale-color($switch-paddle-bg, $lightness: -10%) !default;
// $switch-paddle-border-color: scale-color($switch-paddle-bg, $lightness: -35%) !default;
// $switch-paddle-border-width: 1px !default;
// $switch-paddle-border-style: solid !default;
// $switch-paddle-transition-speed: .1s !default;
// $switch-paddle-transition-ease: ease-out !default;
// $switch-positive-color: scale-color($success-color, $lightness: 94%) !default;
// $switch-negative-color: #f5f5f5 !default;

// // Outline Style for tabbing through switches
// $switch-label-outline: 1px dotted #888 !default;


// //
// // @mixins
// //

// // We use this mixin to create the base styles for our switch element.
// //
// // $transition-speed - Time in ms for switch to toggle. Default: $switch-paddle-transition-speed.
// // $transition-ease - Easing function to use for animation (i.e. ease-out). Default: $switch-paddle-transition-ease.
// @mixin switch-base(
//   $transition-speed:$switch-paddle-transition-speed,
//   $transition-ease:$switch-paddle-transition-ease) {

//   // Default position and structure for switch container.
//   position: relative;
//   padding: 0;
//   display: block;
//   overflow: hidden;
//   border-style: $switch-border-style;
//   border-width: $switch-border-width;
//   margin-bottom: $switch-bottom-margin;

//   // Default label styles for type and transition
//   label {
//     position: relative;
//     #{$default-float}: 0;
//     z-index: 2;
//     float: $default-float;
//     width: 50%;
//     height: 100%;
//     margin: 0;
//     font-weight: bold;
//     text-align: $default-float;

//     // Transition for the switch label to follow paddle
//     @include single-transition(all, $transition-speed, $transition-ease);
//   }

//   // So that we don't need to recreate the form with any JS, we use the
//   // existing radio button, but we cleverly position and hide it.
//   input {
//     position: absolute;
//     z-index: 3;
//     opacity: 0;
//     width: 100%;
//     height: 100%;
//     -moz-appearance: none;

//     // Hover and focus styles for the paddle
//     &:hover,
//     &:focus {
//       cursor: $cursor-pointer-value;
//     }
//   }

//   // The toggle area for radio switches. We call is a paddle.
//   span:last-child {
//     position: absolute;
//     top: -1px;
//     #{$default-float}: -1px;
//     z-index: 1;
//     display: block;
//     padding: 0;
//     border-width: $switch-paddle-border-width;
//     border-style: $switch-paddle-border-style;

//     // Transition for the switch paddle
//     @include single-transition(all, $transition-speed, $transition-ease);
//   }

//   // When a label isn't :checked, we hide it as it slides away.
//   input:not(:checked) + label { opacity: 0; }

//   // Controlling the position of the labels as they are toggled.
//   input:checked { display: none !important; }
//   input { #{$default-float}: 0; display: block !important; }

//   // Left Label alignment and position changes, including fixes for while inside a custom form
//   input:first-of-type + label,
//   input:first-of-type + span + label { #{$default-float}: -50%; }
//   input:first-of-type:checked + label,
//   input:first-of-type:checked + span + label { #{$default-float}: 0%; }

//   // Right Label alignment and position changes, including fixes for while inside a custom form
//   input:last-of-type + label,
//   input:last-of-type + span + label {#{$opposite-direction}: -50%; #{$default-float}: auto; text-align: $opposite-direction; }
//   input:last-of-type:checked + label,
//   input:last-of-type:checked + span + label { #{$opposite-direction}: 0%; #{$default-float}: auto; }

//   // Hiding custom form spans since we auto-create them
//   span.custom { display: none !important; }

//   // FIXME We should be able to remove this going forward.
//   // Bugfix for older Webkit, including mobile Webkit. Adapted from:
//   // http://css-tricks.com/webkit-sibling-bug/
//   // @media only screen and (-webkit-min-device-pixel-ratio:0) and (max-device-width:480px) {
//   //   @if $experimental { -webkit-animation: webkitSiblingBugfix infinite 1s; }
//   // }
//   // @media only screen and (-webkit-min-device-pixel-ratio:1.5) {
//   //   @if $experimental { -webkit-animation: none 0; }
//   // }

//   form.custom & .hidden-field {
//     margin-left: auto;
//     position: absolute;
//     visibility: visible;
//   }
// }

// // We use this mixin to create the size styles for switches.
// //
// // $height - Height (in px) of the switch. Default: $switch-height-med.
// // $font-size - Font size of text in switch. Default: $switch-font-size-med.
// // $line-height - Line height of switch. Default: 2.3rem.
// @mixin switch-size(
//   $height: $switch-height-med,
//   $font-size: $switch-font-size-med,
//   $line-height: 2.3rem) {

//   height: rem-calc($height);

//   label {
//     padding: rem-calc(0, $switch-label-side-padding);
//     line-height: $line-height;
//     font-size: rem-calc($font-size);
//   }

//   input {
//     // Move the paddle to the right position
//     &:first-of-type:checked ~ span:last-child {
//       #{$default-float}: 100%;
//       margin-#{$default-float}: rem-calc(-$height + 1px);
//     }
//   }

//   span:last-child {
//     width: rem-calc($height);
//     height: rem-calc($height);
//   }

// }

// // We use this mixin to add color and other fanciness to the switches.
// //
// // $paddle-bg - Background of switch paddle. Default: $switch-paddle-bg.
// // $positive-color - Background color of positive side of switch. Default: $switch-positive-color.
// // $negative-color - Background color of negative side of switch. Default: $switch-negative-color.
// // $radius - Radius to apply to switch. Default: false.
// // $base-style - Apply base styles? Default: true.
// @mixin switch-style(
//   $paddle-bg:$switch-paddle-bg,
//   $positive-color:$switch-positive-color,
//   $negative-color:$switch-negative-color,
//   $radius:false,
//   $base-style:true) {

//   @if $base-style {
//     background: $switch-bg;
//     border-color: $switch-border-color;

//     span:last-child {
//       border-color: scale-color($paddle-bg, $lightness: -30%);
//       background: $paddle-bg;
//       @if $experimental {
//         background: -moz-linear-gradient(top, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -5%) 100%);
//         background: -webkit-linear-gradient(top, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -5%) 100%);
//       }
//       background: linear-gradient(to bottom, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -5%) 100%);

//       // Building the alternating colored sides of the switch
//       @if $experimental {
//         -webkit-box-shadow: 2px 0 10px 0 rgba(0,0,0,0.07),
//                             1000px 0 0 1000px $positive-color,
//                             -2px 0 10px 0 rgba(0,0,0,0.07),
//                             -1000px 0 0 1000px $negative-color;
//       }
//       box-shadow:         2px 0 10px 0 rgba(0,0,0,0.07),
//                           1000px 0 0 980px $positive-color,
//                           -2px 0 10px 0 rgba(0,0,0,0.07),
//                           -1000px 0 0 1000px $negative-color;
//     }

//     &:hover,
//     &:focus {
//       span:last-child {
//         background: $paddle-bg;
//         @if $experimental {
//           background: -moz-linear-gradient(top, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -10%) 100%);
//           background: -webkit-linear-gradient(top, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -10%) 100%);
//         }
//         background: linear-gradient(to bottom, $paddle-bg 0%, scale-color($paddle-bg, $lightness: -10%) 100%);
//       }
//     }

//     &:active { background: transparent; }
//   }

//   // Setting up the radius for switches
//   @if $radius == true {
//     @include radius(4px);
//     span:last-child { @include radius(3px); }
//   }
//   @else if $radius {
//     @include radius($radius);
//     span:last-child { @include radius($radius - 1px); }
//   }

// }

// // We use this to quickly create switches with a single mixin
// //
// // $transition-speed - Time in ms for switch to toggle. Default: $switch-paddle-transition-speed.
// // $transition-ease - Easing function to use for animation (i.e. ease-out). Default: $switch-paddle-transition-ease.
// // $height - Height (in px) of the switch. Default: $switch-height-med.
// // $font-size - Font size of text in switch. Default: $switch-font-size-med.
// // $line-height - Line height of switch. Default: 2.3rem.
// // $paddle-bg - Background of switch paddle. Default: $switch-paddle-bg.
// // $positive-color - Background color of positive side of switch. Default: $switch-positive-color.
// // $negative-color - Background color of negative side of switch. Default: $switch-negative-color.
// // $radius - Radius to apply to switch. Default: false.
// // $base-style - Apply base styles? Default: true.
// @mixin switch(
//   $transition-speed: $switch-paddle-transition-speed,
//   $transition-ease: $switch-paddle-transition-ease,
//   $height: $switch-height-med,
//   $font-size: $switch-font-size-med,
//   $line-height: 2.3rem,
//   $paddle-bg: $switch-paddle-bg,
//   $positive-color: $switch-positive-color,
//   $negative-color: $switch-negative-color,
//   $radius:false,
//   $base-style:true) {
//     @include switch-base($transition-speed, $transition-ease);
//     @include switch-size($height, $font-size, $line-height);
//     @include switch-style($paddle-bg, $positive-color, $negative-color, $radius, $base-style);
// }

// @include exports("switch") {
//   @if $include-html-form-classes {
//       div.switch {
//         @include switch;

//         // Large radio switches
//         &.large { @include switch-size($switch-height-lrg, $switch-font-size-lrg); }

//         // Small radio switches
//         &.small { @include switch-size($switch-height-sml, $switch-font-size-sml, 2.1rem); }

//         // Tiny radio switches
//         &.tiny { @include switch-size($switch-height-tny, $switch-font-size-tny, 1.9rem); }

//         // Add a radius to the switch
//         &.radius { @include radius(4px);
//           span:last-child{ @include radius(3px); }
//         }

//         // Make the switch completely round, like a pill
//         &.round { @include radius(1000px);
//           span:last-child { @include radius(999px); }
//           label { padding: rem-calc(0 $switch-label-side-padding + 3); }
//         }

//       }

//       @if $experimental { @-webkit-keyframes webkitSiblingBugfix { from { position: relative; } to { position: relative; } } }
//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // @name _tables.scss
// // @dependencies _global.scss
// //

// //
// // @variables
// //

// $include-html-table-classes: $include-html-classes !default;

// // These control the background color for the table and even rows
// $table-bg: #fff !default;
// $table-even-row-bg: #f9f9f9 !default;

// // These control the table cell border style
// $table-border-style: solid !default;
// $table-border-size: 1px !default;
// $table-border-color: #ddd !default;

// // These control the table head styles
// $table-head-bg: #f5f5f5 !default;
// $table-head-font-size: rem-calc(14) !default;
// $table-head-font-color: #222 !default;
// $table-head-font-weight: bold !default;
// $table-head-padding: rem-calc(8 10 10) !default;

// // These control the row padding and font styles
// $table-row-padding: rem-calc(9 10) !default;
// $table-row-font-size: rem-calc(14) !default;
// $table-row-font-color: #222 !default;
// $table-line-height: rem-calc(18) !default;

// // These are for controlling the display and margin of tables
// $table-display: table-cell !default;
// $table-margin-bottom: rem-calc(20) !default;


// //
// // @mixins
// //

// @mixin table {
//   background: $table-bg;
//   margin-bottom: $table-margin-bottom;
//   border: $table-border-style $table-border-size $table-border-color;

//   thead,
//   tfoot {
//     background: $table-head-bg;

//     tr {
//       th,
//       td {
//         padding: $table-head-padding;
//         font-size: $table-head-font-size;
//         font-weight: $table-head-font-weight;
//         color: $table-head-font-color;
//         text-align: $default-float;
//       }
//     }
//   }

//   tr {
//     th,
//     td {
//       padding: $table-row-padding;
//       font-size: $table-row-font-size;
//       color: $table-row-font-color;
//     }

//     &.even,
//     &.alt,
//     &:nth-of-type(even) { background: $table-even-row-bg; }
//   }

//   thead tr th,
//   tfoot tr th,
//   tbody tr td,
//   tr td,
//   tfoot tr td { display: $table-display; line-height: $table-line-height; }
// }


// @include exports("table") {
//   @if $include-html-table-classes {
//     table {
//       @include table;
//     }
//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "grid";

// //
// // @variables
// //

// $include-html-tabs-classes: $include-html-classes !default;

// $tabs-navigation-padding: rem-calc(16) !default;
// $tabs-navigation-bg-color: #efefef !default;
// $tabs-navigation-active-bg-color: #fff !default;
// $tabs-navigation-hover-bg-color: scale-color($tabs-navigation-bg-color, $lightness: -6%) !default;
// $tabs-navigation-font-color: #222 !default;
// $tabs-navigation-font-size: rem-calc(16) !default;
// $tabs-navigation-font-family: $body-font-family !default;

// $tabs-content-margin-bottom: rem-calc(24) !default;
// $tabs-content-padding: $column-gutter/2 !default;

// $tabs-vertical-navigation-margin-bottom: 1.25rem !default;

// @include exports("tab") {
//   @if $include-html-tabs-classes {
//     .tabs {
//       @include clearfix;
//       margin-bottom: 0 !important;
//       dd {
//         position: relative;
//         margin-bottom: 0 !important;
//         float: $default-float;
//         > a {
//           display: block;
//           background: $tabs-navigation-bg-color;
//           color: $tabs-navigation-font-color;
//           padding: $tabs-navigation-padding $tabs-navigation-padding * 2;
//           font-family: $tabs-navigation-font-family;
//           font-size: $tabs-navigation-font-size;
//           &:hover { background: $tabs-navigation-hover-bg-color; }
//         }
//         &.active a { background: $tabs-navigation-active-bg-color; }
//       }
//       &.radius {
//         dd:first-child {
//           a { @include side-radius($default-float, $global-radius); }
//         }
//         dd:last-child {
//           a { @include side-radius($opposite-direction, $global-radius); }
//         }
//       }
//       &.vertical {
//         dd {
//           position: inherit;
//           float: none;
//           display: block;
//           top: auto;
//         }
//       }
//     }

//     .tabs-content {
//       @include clearfix;
//       margin-bottom: $tabs-content-margin-bottom;
//       width: 100%;
//       > .content {
//         display: none;
//         float: $default-float;
//         padding: $tabs-content-padding 0;
//         width: 100%;
//         &.active { display: block; float: none; }
//         &.contained { padding: $tabs-content-padding; }
//       }
//       &.vertical {
//         display: block;
//         > .content { padding: 0 $tabs-content-padding; }
//       }
//     }
//     @media #{$medium-up} {
//       .tabs {
//         &.vertical {
//           width: 20%;
//           float: $default-float;
//           margin-bottom: $tabs-vertical-navigation-margin-bottom;
//         }
//       }
//       .tabs-content {
//         &.vertical {
//           width: 80%;
//           float: $default-float;
//           margin-#{$default-float}: -1px;
//         }
//       }
//     }
//     .no-js {
//       .tabs-content > .content {
//         display: block;
//         float: none;
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";



// //
// // @name _thumbs.scss
// // @dependencies _globals.scss
// //

// //
// // @variables
// //

// $include-html-media-classes: $include-html-classes !default;

// // We use these to control border styles
// $thumb-border-style: solid !default;
// $thumb-border-width: 4px !default;
// $thumb-border-color: #fff !default;
// $thumb-box-shadow: 0 0 0 1px rgba(#000,.2) !default;
// $thumb-box-shadow-hover: 0 0 6px 1px rgba($primary-color,0.5) !default;

// // Radius and transition speed for thumbs
// $thumb-radius: $global-radius !default;
// $thumb-transition-speed: 200ms !default;

// //
// // @mixins
// //

// // We use this to create image thumbnail styles.
// //
// // $border-width - Width of border around thumbnail. Default: $thumb-border-width.
// // $box-shadow - Box shadow to apply to thumbnail. Default: $thumb-box-shadow.
// // $box-shadow-hover - Box shadow to apply on hover. Default: $thumb-box-shadow-hover.
// @mixin thumb(
//   $border-width:$thumb-border-width,
//   $box-shadow:$thumb-box-shadow,
//   $box-shadow-hover:$thumb-box-shadow-hover) {
//   line-height: 0;
//   display: inline-block;
//   border: $thumb-border-style $border-width $thumb-border-color;
//   max-width: 100%;
//   @if $experimental {
//     -webkit-box-shadow: $box-shadow;
//   }
//   box-shadow: $box-shadow;

//   &:hover,
//   &:focus {
//     @if $experimental {
//       -webkit-box-shadow: $box-shadow-hover;
//     }
//     box-shadow: $box-shadow-hover;
//   }
// }


// @include exports("thumb") {
//   @if $include-html-media-classes {

//     /* Image Thumbnails */
//     .th {
//       @include thumb;
//       @include single-transition(all,$thumb-transition-speed,ease-out);

//       &.radius { @include radius($thumb-radius); }
//     }
//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // Tooltip Variables
// //
// $include-html-tooltip-classes: $include-html-classes !default;

// $has-tip-border-bottom: dotted 1px #ccc !default;
// $has-tip-font-weight: bold !default;
// $has-tip-font-color: #333 !default;
// $has-tip-border-bottom-hover: dotted 1px scale-color($primary-color, $lightness: -55%) !default;
// $has-tip-font-color-hover: $primary-color !default;
// $has-tip-cursor-type: help !default;

// $tooltip-padding: rem-calc(12) !default;
// $tooltip-bg: #333 !default;
// $tooltip-font-size: rem-calc(14) !default;
// $tooltip-font-weight: normal !default;
// $tooltip-font-color: #fff !default;
// $tooltip-line-height: 1.3 !default;
// $tooltip-close-font-size: rem-calc(10) !default;
// $tooltip-close-font-weight: normal !default;
// $tooltip-close-font-color: #777 !default;
// $tooltip-font-size-sml: rem-calc(14) !default;
// $tooltip-radius: $global-radius !default;
// $tooltip-rounded: $global-rounded !default;
// $tooltip-pip-size: 5px !default;

// @include exports("tooltip") {
//   @if $include-html-tooltip-classes {

//     /* Tooltips */
//     .has-tip {
//       border-bottom: $has-tip-border-bottom;
//       cursor: $has-tip-cursor-type;
//       font-weight: $has-tip-font-weight;
//       color: $has-tip-font-color;

//       &:hover,
//       &:focus {
//         border-bottom: $has-tip-border-bottom-hover;
//         color: $has-tip-font-color-hover;
//       }

//       &.tip-left,
//       &.tip-right { float: none !important; }
//     }

//     .tooltip {
//       display: none;
//       position: absolute;
//       z-index: 999;
//       font-weight: $tooltip-font-weight;
//       font-size: $tooltip-font-size;
//       line-height: $tooltip-line-height;
//       padding: $tooltip-padding;
//       max-width: 85%;
//       #{$default-float}: 50%;
//       width: 100%;
//       color: $tooltip-font-color;
//       background: $tooltip-bg;

//       &>.nub {
//         display: block;
//         #{$default-float}: $tooltip-pip-size;
//         position: absolute;
//         width: 0;
//         height: 0;
//         border: solid $tooltip-pip-size;
//         border-color: transparent transparent $tooltip-bg transparent;
//         top: -($tooltip-pip-size * 2);

//         &.rtl {
//           left: auto;
//           #{$opposite-direction}: $tooltip-pip-size;
//         }
//       }

//       &.radius {
//         @include radius($tooltip-radius);
//       }
//       &.round {
//         @include radius($tooltip-rounded);
//         &>.nub {
//           left: 2rem;
//         }
//       }

//       &.opened {
//         color: $has-tip-font-color-hover !important;
//         border-bottom: $has-tip-border-bottom-hover !important;
//       }
//     }

//     .tap-to-close {
//       display: block;
//       font-size: $tooltip-close-font-size;
//       color: $tooltip-close-font-color;
//       font-weight: $tooltip-close-font-weight;
//     }

//     @media #{$small} {
//       .tooltip {
//         &>.nub {
//           border-color: transparent transparent $tooltip-bg transparent;
//           top: -($tooltip-pip-size * 2);
//         }
//         &.tip-top>.nub {
//           border-color: $tooltip-bg transparent transparent transparent;
//           top: auto;
//           bottom: -($tooltip-pip-size * 2);
//         }

//         &.tip-left,
//         &.tip-right { float: none !important; }

//         &.tip-left>.nub {
//           border-color: transparent transparent transparent $tooltip-bg;
//           right: -($tooltip-pip-size * 2);
//           left: auto;
//           top: 50%;
//           margin-top: -$tooltip-pip-size;
//         }
//         &.tip-right>.nub {
//           border-color: transparent $tooltip-bg transparent transparent;
//           right: auto;
//           left: -($tooltip-pip-size * 2);
//           top: 50%;
//           margin-top: -$tooltip-pip-size;
//         }

//       }
//     }

//   }
// }// Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";
// @import "grid";

// //
// // Top Bar Variables
// //
// $include-html-top-bar-classes: $include-html-classes !default;

// // Background color for the top bar
// $topbar-bg-color: #333 !default;
// $topbar-bg: $topbar-bg-color !default;

// // Height and margin
// $topbar-height: 45px !default;
// $topbar-margin-bottom: 0 !default;

// // Controlling the styles for the title in the top bar
// $topbar-title-weight: normal !default;
// $topbar-title-font-size: rem-calc(17) !default;

// // Style the top bar dropdown elements
// $topbar-dropdown-bg: #333 !default;
// $topbar-dropdown-link-color: #fff !default;
// $topbar-dropdown-link-bg: #333 !default;
// $topbar-dropdown-link-weight: normal !default;
// $topbar-dropdown-toggle-size: 5px !default;
// $topbar-dropdown-toggle-color: #fff !default;
// $topbar-dropdown-toggle-alpha: 0.4 !default;

// // Set the link colors and styles for top-level nav
// $topbar-link-color: #fff !default;
// $topbar-link-color-hover: #fff !default;
// $topbar-link-color-active: #fff !default;
// $topbar-link-color-active-hover: #fff !default;
// $topbar-link-weight: normal !default;
// $topbar-link-font-size: rem-calc(13) !default;
// $topbar-link-hover-lightness: -10% !default; // Darken by 10%
// $topbar-link-bg: $topbar-bg !default;
// $topbar-link-bg-hover: #272727 !default;
// $topbar-link-bg-active: $primary-color !default;
// $topbar-link-bg-active-hover: scale-color($primary-color, $lightness: -14%) !default;
// $topbar-link-font-family: $body-font-family !default;
// $topbar-link-text-transform: none !default;
// $topbar-link-padding: $topbar-height / 3 !default;

// $topbar-button-font-size: 0.75rem;
// $topbar-button-top: 7px !default;

// $topbar-dropdown-label-color: #777 !default;
// $topbar-dropdown-label-text-transform: uppercase !default;
// $topbar-dropdown-label-font-weight: bold !default;
// $topbar-dropdown-label-font-size: rem-calc(10) !default;
// $topbar-dropdown-label-bg: #333 !default;

// // Top menu icon styles
// $topbar-menu-link-transform: uppercase !default;
// $topbar-menu-link-font-size: rem-calc(13) !default;
// $topbar-menu-link-weight: bold !default;
// $topbar-menu-link-color: #fff !default;
// $topbar-menu-icon-color: #fff !default;
// $topbar-menu-link-color-toggled: #888 !default;
// $topbar-menu-icon-color-toggled: #888 !default;

// // Transitions and breakpoint styles
// $topbar-transition-speed: 300ms !default;
// // Using rem-calc for the below breakpoint causes issues with top bar
// $topbar-breakpoint: #{lower-bound($medium-range)} !default; // Change to 9999px for always mobile layout
// $topbar-media-query: $medium-up !default;

// // Divider Styles
// $topbar-divider-border-bottom: solid 1px  scale-color($topbar-bg-color, $lightness: 13%) !default;
// $topbar-divider-border-top: solid 1px scale-color($topbar-bg-color, $lightness: -50%) !default;

// // Sticky Class
// $topbar-sticky-class: ".sticky" !default;
// $topbar-arrows: true !default; //Set false to remove the triangle icon from the menu item

// // Accessibility mixins for hiding and showing the menu dropdown items
// @mixin topbar-hide-dropdown {
//   // Makes an element visually hidden by default, but visible when focused.
//   display: block;
//   @include element-invisible();
// }

// @mixin topbar-show-dropdown {
//   display: block;
//   @include element-invisible-off();
//   position: absolute !important; // Reset the position from static to absolute
// }

// @include exports("top-bar") {

//   @if $include-html-top-bar-classes {

//     // Used to provide media query values for javascript components.
//     // This class is generated despite the value of $include-html-top-bar-classes
//     // to ensure width calculations work correctly.
//     meta.foundation-mq-topbar {
//       font-family: "/" + unquote($topbar-media-query) + "/";
//       width: $topbar-breakpoint;
//     }

//     /* Wrapped around .top-bar to contain to grid width */
//     .contain-to-grid {
//       width: 100%;
//       background: $topbar-bg;

//       .top-bar { margin-bottom: $topbar-margin-bottom; }
//     }

//     // Wrapped around .top-bar to make it stick to the top
//     .fixed {
//       width: 100%;
//       #{$default-float}: 0;
//       position: fixed;
//       top: 0;
//       z-index: 99;

//       &.expanded:not(.top-bar) {
//           overflow-y: auto;
//           height: auto;
//           width: 100%;
//           max-height: 100%;

//         .title-area {
//           position: fixed;
//           width: 100%;
//           z-index: 99;
//         }
//         // Ensure you can scroll the menu on small screens
//         .top-bar-section {
//           z-index: 98;
//           margin-top: $topbar-height;
//         }
//       }
//     }

//     .top-bar {
//       overflow: hidden;
//       height: $topbar-height;
//       line-height: $topbar-height;
//       position: relative;
//       background: $topbar-bg;
//       margin-bottom: $topbar-margin-bottom;

//       // Topbar Global list Styles
//       ul {
//         margin-bottom: 0;
//         list-style: none;
//       }

//       .row { max-width: none; }

//       form,
//       input { margin-bottom: 0; }

//       input { height: auto; padding-top: .35rem; padding-bottom: .35rem; font-size: $topbar-button-font-size; }

//       .button {
//         padding-top: .45rem;
//         padding-bottom: .35rem;
//         margin-bottom: 0;
//         font-size: $topbar-button-font-size;
//           // position: relative;
//           // top: -1px;

//       }

//       // Title Area
//       .title-area {
//         position: relative;
//         margin: 0;
//       }

//       .name {
//         height: $topbar-height;
//         margin: 0;
//         font-size: $rem-base;

//         h1 {
//           line-height: $topbar-height;
//           font-size: $topbar-title-font-size;
//           margin: 0;
//           a {
//             font-weight: $topbar-title-weight;
//             color: $topbar-link-color;
//             width: 50%;
//             display: block;
//             padding: 0 $topbar-link-padding;
//           }
//         }
//       }

//       // Menu toggle button on small devices
//       .toggle-topbar {
//         position: absolute;
//         #{$opposite-direction}: 0;
//         top: 0;

//         a {
//           color: $topbar-link-color;
//           text-transform: $topbar-menu-link-transform;
//           font-size: $topbar-menu-link-font-size;
//           font-weight: $topbar-menu-link-weight;
//           position: relative;
//           display: block;
//           padding: 0 $topbar-link-padding;
//           height: $topbar-height;
//           line-height: $topbar-height;
//         }

//         // Adding the class "menu-icon" will add the 3-line icon people love and adore.
//         &.menu-icon {
//           #{$opposite-direction}: $topbar-link-padding;
//           top: 50%;
//           margin-top: -16px;
//           padding-#{$default-float}: 40px;

//           a {
//             @if $text-direction == rtl {
//               text-indent: -58px;
//             }
//             height: 34px;
//             line-height: 33px;
//             padding: 0;
//             padding-right: 25px;
//             color: $topbar-menu-link-color;
//             position: relative;

//             &::after {
//               content:"";
//               position: absolute;
//               #{$opposite-direction}: 0;
//               display: block;
//               width: 16px;
//               top:0;
//               height: 0;
//               // Shh, don't tell, but box-shadows create the menu icon :)
//               @if $experimental {
//                 -webkit-box-shadow: 1px 10px 1px 1px $topbar-menu-icon-color,
//                                     1px 16px 1px 1px $topbar-menu-icon-color,
//                                     1px 22px 1px 1px $topbar-menu-icon-color;
//               }
//               box-shadow:         0 10px 0 1px $topbar-menu-icon-color,
//                                   0 16px 0 1px $topbar-menu-icon-color,
//                                   0 22px 0 1px $topbar-menu-icon-color;
//             }
//           }
//         }
//       }

//       // Change things up when the top-bar is expanded
//       &.expanded {
//         height: auto;
//         background: transparent;

//         .title-area { background: $topbar-bg; }

//         .toggle-topbar {
//           a { color: $topbar-menu-link-color-toggled;
//             &::after {
//               // Shh, don't tell, but box-shadows create the menu icon :)
//               @if $experimental {
//                 -webkit-box-shadow: 1px 10px 1px 1px $topbar-menu-icon-color-toggled,
//                                     1px 16px 1px 1px $topbar-menu-icon-color-toggled,
//                                     1px 22px 1px 1px $topbar-menu-icon-color-toggled;
//               }
//               box-shadow:         0 10px 0 1px $topbar-menu-icon-color-toggled,
//                                   0 16px 0 1px $topbar-menu-icon-color-toggled,
//                                   0 22px 0 1px $topbar-menu-icon-color-toggled;
//             }
//           }
//         }
//       }



//     }

//     // Right and Left Navigation that stacked by default
//     .top-bar-section {
//       #{$default-float}: 0;
//       position: relative;
//       width: auto;
//       @include single-transition($default-float, $topbar-transition-speed);

//       ul {
//         width: 100%;
//         height: auto;
//         display: block;
//         background: $topbar-dropdown-bg;
//         font-size: $rem-base;
//         margin: 0;
//       }

//       .divider,
//       [role="separator"] {
//         border-top: $topbar-divider-border-top;
//         clear: both;
//         height: 1px;
//         width: 100%;
//       }

//       ul li {
//         & > a {
//           display: block;
//           width: 100%;
//           color: $topbar-link-color;
//           padding: 12px 0 12px 0;
//           padding-#{$default-float}: $topbar-link-padding;
//           font-family: $topbar-link-font-family;
//           font-size: $topbar-link-font-size;
//           font-weight: $topbar-link-weight;
//           text-transform: $topbar-link-text-transform;
//           background: $topbar-dropdown-bg;

//           &.button {
//             background: $primary-color;
//             font-size: $topbar-link-font-size;
//              padding-#{$opposite-direction}: $topbar-link-padding;
//              padding-#{$default-float}: $topbar-link-padding;
//             &:hover {
//               background: scale-color($primary-color, $lightness: -27%);
//             }
//           }
//           &.button.secondary {
//             background: $secondary-color;
//             &:hover {
//               background: scale-color($secondary-color, $lightness: -11%);
//             }
//           }
//           &.button.success {
//             background: $success-color;
//             &:hover {
//               background: scale-color($success-color, $lightness: -21%);
//             }
//           }
//           &.button.alert {
//             background: $alert-color;
//             &:hover {
//               background: scale-color($alert-color, $lightness: -18%);
//             }
//           }

//         }

//         // Apply the hover link color when it has that class
//         &:hover:not(.has-form) > a {
//           background: $topbar-link-bg-hover;
//           color: $topbar-link-color-hover;

//         }

//         // Apply the active link color when it has that class
//         &.active > a {
//           background: $topbar-link-bg-active;
//           color: $topbar-link-color-active;
//           &:hover {
//                 background: $topbar-link-bg-active-hover;
//                 color: $topbar-link-color-active-hover;
//           }
//         }
//       }

//       // Add some extra padding for list items contains buttons
//       .has-form { padding: $topbar-link-padding; }

//       // Styling for list items that have a dropdown within them.
//       .has-dropdown {
//         position: relative;

//         & > a {
//           &:after {
//             @if ($topbar-arrows){
//               @include css-triangle($topbar-dropdown-toggle-size, rgba($topbar-dropdown-toggle-color, $topbar-dropdown-toggle-alpha), $default-float);
//             }
//             margin-#{$opposite-direction}: $topbar-link-padding;
//             margin-top: -($topbar-dropdown-toggle-size / 2) - 2;
//             position: absolute;
//             top: 50%;
//             #{$opposite-direction}: 0;
//           }
//         }

//         &.moved { position: static;
//           & > .dropdown {
//             @include topbar-show-dropdown();
//             width: 100%;
//           }
//           & > a:after {
//             display: none;
//           }
//         }
//       }

//       // Styling elements inside of dropdowns
//       .dropdown {
//         position: absolute;
//         #{$default-float}: 100%;
//         top: 0;
//         z-index: 99;
//         @include topbar-hide-dropdown();

//         li {
//           width: 100%;
//           height: auto;

//           a {
//             font-weight: $topbar-dropdown-link-weight;
//             padding: 8px $topbar-link-padding;
//             &.parent-link {
//               font-weight: $topbar-link-weight;
//             }
//           }

//           &.title h5 { margin-bottom: 0;
//             a {
//               color: $topbar-link-color;
//               line-height: $topbar-height / 2;
//               display: block;
//             }
//           }
//           &.has-form { padding: 8px $topbar-link-padding; }
//           .button { top: auto; }
//         }

//         label {
//           padding: 8px $topbar-link-padding 2px;
//           margin-bottom: 0;
//           text-transform: $topbar-dropdown-label-text-transform;
//           color: $topbar-dropdown-label-color;
//           font-weight: $topbar-dropdown-label-font-weight;
//           font-size: $topbar-dropdown-label-font-size;
//         }
//       }
//     }

//     .js-generated { display: block; }


//     // Top Bar styles intended for screen sizes above the breakpoint.
//     @media #{$topbar-media-query} {
//       .top-bar {
//         background: $topbar-bg;
//         @include clearfix;
//         overflow: visible;

//         .toggle-topbar { display: none; }

//         .title-area { float: $default-float; }
//         .name h1 a { width: auto; }

//         input,
//         .button {
//           font-size: rem-calc(14);
//           position: relative;
//           top: $topbar-button-top;
//         }

//         &.expanded { background: $topbar-bg; }
//       }

//       .contain-to-grid .top-bar {
//         max-width: $row-width;
//         margin: 0 auto;
//         margin-bottom: $topbar-margin-bottom;
//       }

//       .top-bar-section {
//         @include single-transition(none,0,0);
//         #{$default-float}: 0 !important;

//         ul {
//           width: auto;
//           height: auto !important;
//           display: inline;

//           li {
//             float: $default-float;
//             .js-generated { display: none; }
//           }
//         }

//         li {
//           &.hover {
//             > a:not(.button) {
//               background: $topbar-link-bg-hover;
//               color: $topbar-link-color-hover;
//             }
//           }
//           &:not(.has-form) {
//             a:not(.button) {
//               padding: 0 $topbar-link-padding;
//               line-height: $topbar-height;
//               background: $topbar-link-bg;
//               &:hover { background: $topbar-link-bg-hover; }
//             }
//           }
//           &.active:not(.has-form) {
//             a:not(.button) {
//               padding: 0 $topbar-link-padding;
//               line-height: $topbar-height;
//               color: $topbar-link-color-active;
//               background: $topbar-link-bg-active;
//               &:hover { background: $topbar-link-bg-active-hover; }
//             }
//           }
//         }

//         .has-dropdown {

//           @if($topbar-arrows){

//             & > a {
//               padding-#{$opposite-direction}: $topbar-link-padding + 20 !important;
//               &:after {
//                 @include css-triangle($topbar-dropdown-toggle-size, rgba($topbar-dropdown-toggle-color, $topbar-dropdown-toggle-alpha), top);
//                 margin-top: -($topbar-dropdown-toggle-size / 2);
//                 top: $topbar-height / 2;
//               }
//             }

//           }

//           &.moved { position: relative;
//             & > .dropdown {
//               @include topbar-hide-dropdown();
//             }
//           }

//           &.hover, &.not-click:hover {
//             & > .dropdown {
//               @include topbar-show-dropdown();
//             }
//           }

//           .dropdown li.has-dropdown {
//             & > a {
//               &:after {
//                 border: none;
//                 content: "\00bb";
//                 top: 1rem;
//                 margin-top: -1px;
//                 #{$opposite-direction}: 5px;
//                 line-height: 1.2;
//               }
//             }
//           }

//         }

//         .dropdown {
//           #{$default-float}: 0;
//           top: auto;
//           background: transparent;
//           min-width: 100%;

//           li {
//             a {
//               color: $topbar-dropdown-link-color;
//               line-height: 1;
//               white-space: nowrap;
//               padding: 12px $topbar-link-padding;
//               background: $topbar-dropdown-link-bg;
//             }

//             label {
//               white-space: nowrap;
//               background: $topbar-dropdown-label-bg;
//             }

//             // Second Level Dropdowns
//             .dropdown {
//               #{$default-float}: 100%;
//               top: 0;
//             }
//           }
//         }

//         & > ul > .divider,
//         & > ul > [role="separator"] {
//           border-bottom: none;
//           border-top: none;
//           border-#{$opposite-direction}: $topbar-divider-border-bottom;
//           clear: none;
//           height: $topbar-height;
//           width: 0;
//         }

//         .has-form {
//           background: $topbar-link-bg;
//           padding: 0 $topbar-height / 3;
//           height: $topbar-height;
//         }

//         // Position overrides for ul.right and ul.left
//         .right {
//           li .dropdown {
//             #{$default-float}: auto;
//             #{$opposite-direction}: 0;

//             li .dropdown { #{$opposite-direction}: 100%; }
//           }
//         }
//         .left {
//           li .dropdown {
//             #{$opposite-direction}: auto;
//             #{$default-float}: 0;

//             li .dropdown { #{$default-float}: 100%; }
//           }
//         }
//       }

//       // Degrade gracefully when Javascript is disabled. Displays dropdown and changes
//       // background & text color on hover.
//       .no-js .top-bar-section {
//         ul li {
//           // Apply the hover link color when it has that class
//           &:hover > a {
//             background: $topbar-link-bg-hover;
//             color: $topbar-link-color-hover;
//           }

//           // Apply the active link color when it has that class
//           &:active > a {
//             background: $topbar-link-bg-active;
//             color: $topbar-link-color-active;
//           }
//         }

//         .has-dropdown {
//           &:hover {
//             & > .dropdown {
//               @include topbar-show-dropdown();
//             }
//           }
//         }
//       }
//     }
//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// $include-html-type-classes: $include-html-classes !default;

// // We use these to control header font styles
// $header-font-family: $body-font-family !default;
// $header-font-weight: normal !default;
// $header-font-style: normal !default;
// $header-font-color: #222 !default;
// $header-line-height: 1.4 !default;
// $header-top-margin: .2rem !default;
// $header-bottom-margin: .5rem !default;
// $header-text-rendering: optimizeLegibility !default;

// // We use these to control header font sizes
// $h1-font-size: rem-calc(44) !default;
// $h2-font-size: rem-calc(37) !default;
// $h3-font-size: rem-calc(27) !default;
// $h4-font-size: rem-calc(23) !default;
// $h5-font-size: rem-calc(18) !default;
// $h6-font-size: 1rem !default;

// // These control how subheaders are styled.
// $subheader-line-height: 1.4 !default;
// $subheader-font-color: scale-color($header-font-color, $lightness: 35%) !default;
// $subheader-font-weight: normal !default;
// $subheader-top-margin: .2rem !default;
// $subheader-bottom-margin: .5rem !default;

// // A general <small> styling
// $small-font-size: 60% !default;
// $small-font-color: scale-color($header-font-color, $lightness: 35%) !default;

// // We use these to style paragraphs
// $paragraph-font-family: inherit !default;
// $paragraph-font-weight: normal !default;
// $paragraph-font-size: 1rem !default;
// $paragraph-line-height: 1.6 !default;
// $paragraph-margin-bottom: rem-calc(20) !default;
// $paragraph-aside-font-size: rem-calc(14) !default;
// $paragraph-aside-line-height: 1.35 !default;
// $paragraph-aside-font-style: italic !default;
// $paragraph-text-rendering: optimizeLegibility !default;

// // We use these to style <code> tags
// $code-color: scale-color($alert-color, $lightness: -27%) !default;
// $code-font-family: Consolas, 'Liberation Mono', Courier, monospace !default;
// $code-font-weight: bold !default;

// // We use these to style anchors
// $anchor-text-decoration: none !default;
// $anchor-font-color: $primary-color !default;
// $anchor-font-color-hover: scale-color($anchor-font-color, $lightness: -14%) !default;

// // We use these to style the <hr> element
// $hr-border-width: 1px !default;
// $hr-border-style: solid !default;
// $hr-border-color: #ddd !default;
// $hr-margin: rem-calc(20) !default;

// // We use these to style lists
// $list-style-position: outside !default;
// $list-side-margin: 1.1rem !default;
// $list-ordered-side-margin: 1.4rem !default;
// $list-side-margin-no-bullet: 0 !default;
// $list-nested-margin: rem-calc(20) !default;
// $definition-list-header-weight: bold !default;
// $definition-list-header-margin-bottom: .3rem !default;
// $definition-list-margin-bottom: rem-calc(12) !default;

// // We use these to style blockquotes
// $blockquote-font-color: scale-color($header-font-color, $lightness: 35%) !default;
// $blockquote-padding: rem-calc(9 20 0 19) !default;
// $blockquote-border: 1px solid #ddd !default;
// $blockquote-cite-font-size: rem-calc(13) !default;
// $blockquote-cite-font-color: scale-color($header-font-color, $lightness: 23%) !default;
// $blockquote-cite-link-color: $blockquote-cite-font-color !default;

// // Acronym styles
// $acronym-underline: 1px dotted #ddd !default;

// // We use these to control padding and margin
// $microformat-padding: rem-calc(10 12) !default;
// $microformat-margin: rem-calc(0 0 20 0) !default;

// // We use these to control the border styles
// $microformat-border-width: 1px !default;
// $microformat-border-style: solid !default;
// $microformat-border-color: #ddd !default;

// // We use these to control full name font styles
// $microformat-fullname-font-weight: bold !default;
// $microformat-fullname-font-size: rem-calc(15) !default;

// // We use this to control the summary font styles
// $microformat-summary-font-weight: bold !default;

// // We use this to control abbr padding
// $microformat-abbr-padding: rem-calc(0 1) !default;

// // We use this to control abbr font styles
// $microformat-abbr-font-weight: bold !default;
// $microformat-abbr-font-decoration: none !default;

// //
// // Responsive Text alignment
// //

// // Text Breakpoints
// $text-breakpoint-sizes:
//   small,
//   medium,
//   large,
//   xlarge,
//   xxlarge
// ;
// $text-breakpoint-only-queries:
//   unquote($small-only),
//   unquote($medium-only),
//   unquote($large-only),
//   unquote($xlarge-only),
//   unquote($xxlarge-only)
// ;
// $text-breakpoint-up-queries:
//   unquote($small-up),
//   unquote($medium-up),
//   unquote($large-up),
//   unquote($xlarge-up),
//   unquote($xxlarge-up)
// ;

// @mixin text-alignment-loop {
//   $text-alignments: left, right, center, justify;

//   // Global Text Styles
//   @each $alignment in $text-alignments {
//     .text-#{$alignment} {
//       text-align: #{$alignment} !important;
//     }
//   }

//   @each $current-text-breakpoint in $text-breakpoint-sizes {
//     @media #{nth($text-breakpoint-only-queries, index($text-breakpoint-sizes, $current-text-breakpoint))} {
//       @each $alignment in $text-alignments {
//         .#{$current-text-breakpoint}-only-text-#{$alignment} {
//           text-align: #{$alignment} !important;
//         }
//       }
//     }
//     @media #{nth($text-breakpoint-up-queries, index($text-breakpoint-sizes, $current-text-breakpoint))} {
//       @each $alignment in $text-alignments {
//         .#{$current-text-breakpoint}-text-#{$alignment} {
//           text-align: #{$alignment} !important;
//         }
//       }
//     }
//   }
// }

// @include text-alignment-loop;

// //
// // Typography Placeholders
// //

// // These will throw a deprecation warning if used within a media query.
// @mixin lead {
//   font-size: $paragraph-font-size + rem-calc(3.5);
//   line-height: 1.6;
// }

// @mixin subheader {
//   line-height: $subheader-line-height;
//   color: $subheader-font-color;
//   font-weight: $subheader-font-weight;
//   margin-top: $subheader-top-margin;
//   margin-bottom: $subheader-bottom-margin;
// }
// @include exports("type") {
//   @if $include-html-type-classes {

//     // Global Text Styles
//     .text-left    { text-align: left !important; }
//     .text-right   { text-align: right !important; }
//     .text-center  { text-align: center !important; }
//     .text-justify { text-align: justify !important; }

//     @media #{$small-only} {
//         .small-only-text-left    { text-align: left !important; }
//         .small-only-text-right   { text-align: right !important; }
//         .small-only-text-center  { text-align: center !important; }
//         .small-only-text-justify { text-align: justify !important; }
//     }

//     @media #{$small-up} {
//         .small-text-left    { text-align: left !important; }
//         .small-text-right   { text-align: right !important; }
//         .small-text-center  { text-align: center !important; }
//         .small-text-justify { text-align: justify !important; }
//     }

//     @media #{$medium-only} {
//         .medium-only-text-left    { text-align: left !important; }
//         .medium-only-text-right   { text-align: right !important; }
//         .medium-only-text-center  { text-align: center !important; }
//         .medium-only-text-justify { text-align: justify !important; }
//     }

//     @media #{$medium-up} {
//         .medium-text-left    { text-align: left !important; }
//         .medium-text-right   { text-align: right !important; }
//         .medium-text-center  { text-align: center !important; }
//         .medium-text-justify { text-align: justify !important; }
//     }

//     @media #{$large-only} {
//         .large-only-text-left    { text-align: left !important; }
//         .large-only-text-right   { text-align: right !important; }
//         .large-only-text-center  { text-align: center !important; }
//         .large-only-text-justify { text-align: justify !important; }
//     }

//     @media #{$large-up} {
//         .large-text-left    { text-align: left !important; }
//         .large-text-right   { text-align: right !important; }
//         .large-text-center  { text-align: center !important; }
//         .large-text-justify { text-align: justify !important; }
//     }

//     @media #{$xlarge-only} {
//         .xlarge-only-text-left    { text-align: left !important; }
//         .xlarge-only-text-right   { text-align: right !important; }
//         .xlarge-only-text-center  { text-align: center !important; }
//         .xlarge-only-text-justify { text-align: justify !important; }
//     }

//     @media #{$xlarge-up} {
//         .xlarge-text-left    { text-align: left !important; }
//         .xlarge-text-right   { text-align: right !important; }
//         .xlarge-text-center  { text-align: center !important; }
//         .xlarge-text-justify { text-align: justify !important; }
//     }

//     @media #{$xxlarge-only} {
//         .xxlarge-only-text-left    { text-align: left !important; }
//         .xxlarge-only-text-right   { text-align: right !important; }
//         .xxlarge-only-text-center  { text-align: center !important; }
//         .xxlarge-only-text-justify { text-align: justify !important; }
//     }

//     @media #{$xxlarge-up} {
//         .xxlarge-text-left    { text-align: left !important; }
//         .xxlarge-text-right   { text-align: right !important; }
//         .xxlarge-text-center  { text-align: center !important; }
//         .xxlarge-text-justify { text-align: justify !important; }
//     }

//     /* Typography resets */
//     div,
//     dl,
//     dt,
//     dd,
//     ul,
//     ol,
//     li,
//     h1,
//     h2,
//     h3,
//     h4,
//     h5,
//     h6,
//     pre,
//     form,
//     p,
//     blockquote,
//     th,
//     td {
//       margin:0;
//       padding:0;
//     }

//     /* Default Link Styles */
//     a {
//       color: $anchor-font-color;
//       text-decoration: $anchor-text-decoration;
//       line-height: inherit;

//       &:hover,
//       &:focus { color: $anchor-font-color-hover; }

//       img { border:none; }
//     }

//     /* Default paragraph styles */
//     p {
//       font-family: $paragraph-font-family;
//       font-weight: $paragraph-font-weight;
//       font-size: $paragraph-font-size;
//       line-height: $paragraph-line-height;
//       margin-bottom: $paragraph-margin-bottom;
//       text-rendering: $paragraph-text-rendering;

//       &.lead { @include lead; }

//       & aside {
//         font-size: $paragraph-aside-font-size;
//         line-height: $paragraph-aside-line-height;
//         font-style: $paragraph-aside-font-style;
//       }
//     }

//     /* Default header styles */
//     h1, h2, h3, h4, h5, h6 {
//       font-family: $header-font-family;
//       font-weight: $header-font-weight;
//       font-style: $header-font-style;
//       color: $header-font-color;
//       text-rendering: $header-text-rendering;
//       margin-top: $header-top-margin;
//       margin-bottom: $header-bottom-margin;
//       line-height: $header-line-height;

//       small {
//         font-size: $small-font-size;
//         color: $small-font-color;
//         line-height: 0;
//       }
//     }

//     h1 { font-size: $h1-font-size - rem-calc(10); }
//     h2 { font-size: $h2-font-size - rem-calc(10); }
//     h3 { font-size: $h3-font-size - rem-calc(5); }
//     h4 { font-size: $h4-font-size - rem-calc(5); }
//     h5 { font-size: $h5-font-size; }
//     h6 { font-size: $h6-font-size; }

//     .subheader { @include subheader; }

//     hr {
//       border: $hr-border-style $hr-border-color;
//       border-width: $hr-border-width 0 0;
//       clear: both;
//       margin: $hr-margin 0 ($hr-margin - rem-calc($hr-border-width));
//       height: 0;
//     }

//     /* Helpful Typography Defaults */
//     em,
//     i {
//       font-style: italic;
//       line-height: inherit;
//     }

//     strong,
//     b {
//       font-weight: bold;
//       line-height: inherit;
//     }

//     small {
//       font-size: $small-font-size;
//       line-height: inherit;
//     }

//     code {
//       font-family: $code-font-family;
//       font-weight: $code-font-weight;
//       color: $code-color;
//     }

//     /* Lists */
//     ul,
//     ol,
//     dl {
//       font-size: $paragraph-font-size;
//       line-height: $paragraph-line-height;
//       margin-bottom: $paragraph-margin-bottom;
//       list-style-position: $list-style-position;
//       font-family: $paragraph-font-family;
//     }

//     ul {
//       margin-#{$default-float}: $list-side-margin;
//       &.no-bullet {
//         margin-#{$default-float}: $list-side-margin-no-bullet;
//         li {
//           ul,
//           ol {
//             margin-#{$default-float}: $list-nested-margin;
//             margin-bottom: 0;
//             list-style: none;
//           }
//         }
//       }
//     }

//     /* Unordered Lists */
//     ul {
//       li {
//         ul,
//         ol {
//           margin-#{$default-float}: $list-nested-margin;
//           margin-bottom: 0;
//         }
//       }
//       &.square,
//       &.circle,
//       &.disc {
//         li ul { list-style: inherit; }
//       }

//       &.square { list-style-type: square; margin-#{$default-float}: $list-side-margin;}
//       &.circle { list-style-type: circle; margin-#{$default-float}: $list-side-margin;}
//       &.disc { list-style-type: disc; margin-#{$default-float}: $list-side-margin;}
//       &.no-bullet { list-style: none; }
//     }

//     /* Ordered Lists */
//     ol {
//       margin-#{$default-float}: $list-ordered-side-margin;
//       li {
//         ul,
//         ol {
//           margin-#{$default-float}: $list-nested-margin;
//           margin-bottom: 0;
//         }
//       }
//     }

//     /* Definition Lists */
//     dl {
//       dt {
//         margin-bottom: $definition-list-header-margin-bottom;
//         font-weight: $definition-list-header-weight;
//       }
//       dd { margin-bottom: $definition-list-margin-bottom; }
//     }

//     /* Abbreviations */
//     abbr,
//     acronym {
//       text-transform: uppercase;
//       font-size: 90%;
//       color: $body-font-color;
//       border-bottom: $acronym-underline;
//       cursor: $cursor-help-value;
//     }
//     abbr {
//       text-transform: none;
//     }

//     /* Blockquotes */
//     blockquote {
//       margin: 0 0 $paragraph-margin-bottom;
//       padding: $blockquote-padding;
//       border-#{$default-float}: $blockquote-border;

//       cite {
//         display: block;
//         font-size: $blockquote-cite-font-size;
//         color: $blockquote-cite-font-color;
//         &:before {
//           content: "\2014 \0020";
//         }

//         a,
//         a:visited {
//           color: $blockquote-cite-link-color;
//         }
//       }
//     }
//     blockquote,
//     blockquote p {
//       line-height: $paragraph-line-height;
//       color: $blockquote-font-color;
//     }

//     /* Microformats */
//     .vcard {
//       display: inline-block;
//       margin: $microformat-margin;
//       border: $microformat-border-width $microformat-border-style $microformat-border-color;
//       padding: $microformat-padding;

//       li {
//         margin: 0;
//         display: block;
//       }
//       .fn {
//         font-weight: $microformat-fullname-font-weight;
//         font-size: $microformat-fullname-font-size;
//       }
//     }

//     .vevent {
//       .summary { font-weight: $microformat-summary-font-weight; }

//       abbr {
//         cursor: $cursor-default-value;
//         text-decoration: $microformat-abbr-font-decoration;
//         font-weight: $microformat-abbr-font-weight;
//         border: none;
//         padding: $microformat-abbr-padding;
//       }
//     }


//     @media #{$medium-up} {
//       h1,h2,h3,h4,h5,h6 { line-height: $header-line-height; }
//       h1 { font-size: $h1-font-size; }
//       h2 { font-size: $h2-font-size; }
//       h3 { font-size: $h3-font-size; }
//       h4 { font-size: $h4-font-size; }
//     }

//     // Only include these styles if you want them.
//     @if $include-print-styles {
//       /*
//        * Print styles.
//        *
//        * Inlined to avoid required HTTP connection: www.phpied.com/delay-loading-your-print-css/
//        * Credit to Paul Irish and HTML5 Boilerplate (html5boilerplate.com)
//       */
//       .print-only { display: none !important; }
//       @media print {
//         * {
//           background: transparent !important;
//           color: #000 !important; /* Black prints faster: h5bp.com/s */
//           box-shadow: none !important;
//           text-shadow: none !important;
//         }

//         a,
//         a:visited { text-decoration: underline;}
//         a[href]:after { content: " (" attr(href) ")"; }

//         abbr[title]:after { content: " (" attr(title) ")"; }

//         // Don't show links for images, or javascript/internal links
//         .ir a:after,
//         a[href^="javascript:"]:after,
//         a[href^="#"]:after { content: ""; }

//         pre,
//         blockquote {
//           border: 1px solid #999;
//           page-break-inside: avoid;
//         }

//         thead { display: table-header-group; /* h5bp.com/t */ }

//         tr,
//         img { page-break-inside: avoid; }

//         img { max-width: 100% !important; }

//         @page { margin: 0.5cm; }

//         p,
//         h2,
//         h3 {
//           orphans: 3;
//           widows: 3;
//         }

//         h2,
//         h3 { page-break-after: avoid; }

//         .hide-on-print { display: none !important; }
//         .print-only { display: block !important; }
//         .hide-for-print { display: none !important; }
//         .show-for-print { display: inherit !important; }
//       }
//     }

//   }
// }
// // Foundation by ZURB
// // foundation.zurb.com
// // Licensed under MIT Open Source

// @import "global";

// //
// // Foundation Visibility Classes
// //
// $include-html-visibility-classes: $include-html-classes !default;
// $include-table-visibility-classes: true !default;
// $include-legacy-visibility-classes: true !default;

// //
// // Media Class Names
// //
// // Visibility Breakpoints
// $visibility-breakpoint-sizes:
//   small,
//   medium,
//   large,
//   xlarge,
//   xxlarge;

// $visibility-breakpoint-queries:
//   unquote($small-up),
//   unquote($medium-up),
//   unquote($large-up),
//   unquote($xlarge-up),
//   unquote($xxlarge-up);

// @mixin visibility-loop {
//   @each $current-visibility-breakpoint in $visibility-breakpoint-sizes {
//     $visibility-inherit-list: ();
//     $visibility-none-list: ();

//     $visibility-table-list: ();
//     $visibility-table-header-group-list: ();
//     $visibility-table-row-group-list: ();
//     $visibility-table-row-list: ();
//     $visibility-table-cell-list: ();

//     @each $visibility-comparison-breakpoint in $visibility-breakpoint-sizes {
//       @if index($visibility-breakpoint-sizes, $visibility-comparison-breakpoint) < index($visibility-breakpoint-sizes, $current-visibility-breakpoint) {
//         // smaller than current breakpoint

//         $visibility-inherit-list: append($visibility-inherit-list, unquote(
//           '.hide-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-none-list: append($visibility-none-list, unquote(
//           '.show-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-list: append($visibility-table-list, unquote(
//           'table.hide-for-#{$visibility-comparison-breakpoint}-only, table.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//           'thead.hide-for-#{$visibility-comparison-breakpoint}-only, thead.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//           'tbody.hide-for-#{$visibility-comparison-breakpoint}-only, tbody.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-list: append($visibility-table-row-list, unquote(
//           'tr.hide-for-#{$visibility-comparison-breakpoint}-only, tr.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//           'th.hide-for-#{$visibility-comparison-breakpoint}-only, td.hide-for-#{$visibility-comparison-breakpoint}-only, th.show-for-#{$visibility-comparison-breakpoint}-up, td.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);

//         @if $include-legacy-visibility-classes {
//           $visibility-inherit-list: append($visibility-inherit-list, unquote(
//             '.hide-for-#{$visibility-comparison-breakpoint}, .hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-none-list: append($visibility-none-list, unquote(
//             '.show-for-#{$visibility-comparison-breakpoint}, .show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-list: append($visibility-table-list, unquote(
//             'table.hide-for-#{$visibility-comparison-breakpoint}, table.hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//             'thead.hide-for-#{$visibility-comparison-breakpoint}, thead.hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//             'tbody.hide-for-#{$visibility-comparison-breakpoint}, tbody.hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-list: append($visibility-table-row-list, unquote(
//             'tr.hide-for-#{$visibility-comparison-breakpoint}, tr.hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//             'th.hide-for-#{$visibility-comparison-breakpoint}, td.hide-for-#{$visibility-comparison-breakpoint}, th.hide-for-#{$visibility-comparison-breakpoint}-down, td.hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//         }

//       } @else if index($visibility-breakpoint-sizes, $visibility-comparison-breakpoint) > index($visibility-breakpoint-sizes, $current-visibility-breakpoint) {
//         // larger than current breakpoint

//         $visibility-inherit-list: append($visibility-inherit-list, unquote(
//           '.hide-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-none-list: append($visibility-none-list, unquote(
//           '.show-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-list: append($visibility-table-list, unquote(
//           'table.hide-for-#{$visibility-comparison-breakpoint}-only, table.hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//           'thead.hide-for-#{$visibility-comparison-breakpoint}-only, thead.hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//           'tbody.hide-for-#{$visibility-comparison-breakpoint}-only, tbody.hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-list: append($visibility-table-row-list, unquote(
//           'tr.hide-for-#{$visibility-comparison-breakpoint}-only, tr.hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//           'th.hide-for-#{$visibility-comparison-breakpoint}-only, td.hide-for-#{$visibility-comparison-breakpoint}-only, th.hide-for-#{$visibility-comparison-breakpoint}-up, td.hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);

//         @if $include-legacy-visibility-classes {
//           $visibility-inherit-list: append($visibility-inherit-list, unquote(
//             '.hide-for-#{$visibility-comparison-breakpoint}, .show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-none-list: append($visibility-none-list, unquote(
//             '.show-for-#{$visibility-comparison-breakpoint}, .hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-list: append($visibility-table-list, unquote(
//             'table.hide-for-#{$visibility-comparison-breakpoint}, table.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//             'thead.hide-for-#{$visibility-comparison-breakpoint}, thead.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//             'tbody.hide-for-#{$visibility-comparison-breakpoint}, tbody.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-list: append($visibility-table-row-list, unquote(
//             'tr.hide-for-#{$visibility-comparison-breakpoint}, tr.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//             'th.hide-for-#{$visibility-comparison-breakpoint}, td.hide-for-#{$visibility-comparison-breakpoint}, th.show-for-#{$visibility-comparison-breakpoint}-down, td.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//         }

//       } @else {
//         // current breakpoint

//         $visibility-inherit-list: append($visibility-inherit-list, unquote(
//           '.show-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-none-list: append($visibility-none-list, unquote(
//           '.hide-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-list: append($visibility-table-list, unquote(
//           'table.show-for-#{$visibility-comparison-breakpoint}-only, table.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//           'thead.show-for-#{$visibility-comparison-breakpoint}-only, thead.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//           'tbody.show-for-#{$visibility-comparison-breakpoint}-only, tbody.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-row-list: append($visibility-table-row-list, unquote(
//           'tr.show-for-#{$visibility-comparison-breakpoint}-only, tr.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);
//         $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//           'th.show-for-#{$visibility-comparison-breakpoint}-only, td.show-for-#{$visibility-comparison-breakpoint}-only, th.show-for-#{$visibility-comparison-breakpoint}-up, td.show-for-#{$visibility-comparison-breakpoint}-up'
//         ), comma);

//         @if $include-legacy-visibility-classes {
//           $visibility-inherit-list: append($visibility-inherit-list, unquote(
//             '.show-for-#{$visibility-comparison-breakpoint}, .show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-none-list: append($visibility-none-list, unquote(
//             '.hide-for-#{$visibility-comparison-breakpoint}, .hide-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-list: append($visibility-table-list, unquote(
//             'table.show-for-#{$visibility-comparison-breakpoint}, table.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-header-group-list: append($visibility-table-header-group-list, unquote(
//             'thead.show-for-#{$visibility-comparison-breakpoint}, thead.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-group-list: append($visibility-table-row-group-list, unquote(
//             'tbody.show-for-#{$visibility-comparison-breakpoint}, tbody.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-row-list: append($visibility-table-row-list, unquote(
//             'tr.show-for-#{$visibility-comparison-breakpoint}, tr.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//           $visibility-table-cell-list: append($visibility-table-cell-list, unquote(
//             'th.show-for-#{$visibility-comparison-breakpoint}, td.show-for-#{$visibility-comparison-breakpoint}, th.show-for-#{$visibility-comparison-breakpoint}-down, td.show-for-#{$visibility-comparison-breakpoint}-down'
//           ), comma);
//         }
//       }
//     }

//     /* #{$current-visibility-breakpoint} displays */
//     @media #{nth($visibility-breakpoint-queries, index($visibility-breakpoint-sizes, $current-visibility-breakpoint))} {
//       #{$visibility-inherit-list} {
//         display: inherit !important;
//       }
//       #{$visibility-none-list} {
//         display: none !important;
//       }
//       @if $include-table-visibility-classes != false {
//         #{$visibility-table-list} {
//           display: table;
//         }
//         #{$visibility-table-header-group-list} {
//           display: table-header-group !important;
//         }
//         #{$visibility-table-row-group-list} {
//           display: table-row-group !important;
//         }
//         #{$visibility-table-row-list} {
//           display: table-row !important;
//         }
//         #{$visibility-table-cell-list} {
//           display: table-cell !important;
//         }
//       }
//     }
//   }
// }


// @if $include-html-visibility-classes != false {

//   @include visibility-loop;

//   /* Orientation targeting */
//   .show-for-landscape,
//   .hide-for-portrait { display: inherit !important; }
//   .hide-for-landscape,
//   .show-for-portrait { display: none !important; }

//   /* Specific visibility for tables */
//   table {
//     &.hide-for-landscape,
//     &.show-for-portrait { display: table; }
//   }
//   thead {
//     &.hide-for-landscape,
//     &.show-for-portrait { display: table-header-group !important; }
//   }
//   tbody {
//     &.hide-for-landscape,
//     &.show-for-portrait { display: table-row-group !important; }
//   }
//   tr {
//     &.hide-for-landscape,
//     &.show-for-portrait { display: table-row !important; }
//   }
//   td,
//   th {
//     &.hide-for-landscape,
//     &.show-for-portrait { display: table-cell !important; }
//   }

//   @media #{$landscape} {
//     .show-for-landscape,
//     .hide-for-portrait { display: inherit !important; }
//     .hide-for-landscape,
//     .show-for-portrait { display: none !important; }

//     /* Specific visibility for tables */
//     table {
//       &.show-for-landscape,
//       &.hide-for-portrait { display: table; }
//     }
//     thead {
//       &.show-for-landscape,
//       &.hide-for-portrait { display: table-header-group !important; }
//     }
//     tbody {
//       &.show-for-landscape,
//       &.hide-for-portrait { display: table-row-group !important; }
//     }
//     tr {
//       &.show-for-landscape,
//       &.hide-for-portrait { display: table-row !important; }
//     }
//     td,
//     th {
//       &.show-for-landscape,
//       &.hide-for-portrait { display: table-cell !important; }
//     }
//   }

//   @media #{$portrait} {
//     .show-for-portrait,
//     .hide-for-landscape { display: inherit !important; }
//     .hide-for-portrait,
//     .show-for-landscape { display: none !important; }

//     /* Specific visibility for tables */
//     table {
//       &.show-for-portrait,
//       &.hide-for-landscape { display: table; }
//     }
//     thead {
//       &.show-for-portrait,
//       &.hide-for-landscape { display: table-header-group !important; }
//     }
//     tbody {
//       &.show-for-portrait,
//       &.hide-for-landscape { display: table-row-group !important; }
//     }
//     tr {
//       &.show-for-portrait,
//       &.hide-for-landscape { display: table-row !important; }
//     }
//     td,
//     th {
//       &.show-for-portrait,
//       &.hide-for-landscape { display: table-cell !important; }
//     }
//   }

//   /* Touch-enabled device targeting */
//   .show-for-touch { display: none !important; }
//   .hide-for-touch { display: inherit !important; }
//   .touch .show-for-touch { display: inherit !important; }
//   .touch .hide-for-touch { display: none !important; }

//   /* Specific visibility for tables */
//   table.hide-for-touch { display: table; }
//   .touch table.show-for-touch { display: table; }
//   thead.hide-for-touch { display: table-header-group !important; }
//   .touch thead.show-for-touch { display: table-header-group !important; }
//   tbody.hide-for-touch { display: table-row-group !important; }
//   .touch tbody.show-for-touch { display: table-row-group !important; }
//   tr.hide-for-touch { display: table-row !important; }
//   .touch tr.show-for-touch { display: table-row !important; }
//   td.hide-for-touch { display: table-cell !important; }
//   .touch td.show-for-touch { display: table-cell !important; }
//   th.hide-for-touch { display: table-cell !important; }
//   .touch th.show-for-touch { display: table-cell !important; }

// }@import "global";

// //
// // @variables
// //

// //
// // @mixins

// @mixin x-center() {
//   position:absolute;
//   left:50%;
//   -webkit-transform: translateX(-50%);
//   -ms-transform: translateX(-50%);
//   transform: translateX(-50%);
// }
// @mixin y-center() {
//   position:relative;
//   top:50%;
//   -webkit-transform: translateY(-50%);
//   -ms-transform: translateY(-50%);
//   transform: translateY(-50%);
// }

// @mixin xy-center() {
//   position:absolute;
//   top:50%;
//   left:50%;
//   -webkit-transform: translate(-50%, -50%);
//   -ms-transform: translate(-50%, -50%);
//   transform: translate(-50%, -50%);
// }


// .xy-center {
//   @include xy-center();
// }

// .x-center {
//   @include x-center();
// }

// .y-center {
//   @include y-center();
// }